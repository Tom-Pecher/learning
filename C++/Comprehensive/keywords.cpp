
// A
    // and 	An alternative way to write the logical && operator


    // and_eq 	An alternative way to write the &= assignment operator



// B
    // bitand 	An alternative way to write the & bitwise operator


    // bitor 	An alternative way to write the | bitwise operator


    // bool 	A data type that can only store true or false values


    // break 	Breaks out of a loop or a switch block



// C
    // case 	    Marks a block of code in switch statements


    // catch 	    Catches exceptions generated by try statements


    // char 	    A data type that can store a single character


    // class 	    Defines a class


    // compl 	    An alternative way to write the ~ bitwise operator


    // const 	    Defines a variable or parameter as a constant (unchangeable) or specifies that a class method does not modify attributes of the class


    // continue     Continues to the next iteration of a loop



// D
    // default 	    Specifies the default block of code in a switch statement


    // delete 	    Frees dynamic memory


    // do 	        Used together with while to create a do/while loop


    // double 	    A data type that is usually 64 bits long which can store fractional numbers



// E
    // else 	    Used in conditional statements


    // enum 	    Declares an enumerated type



// F
    // false 	    A boolean value equivalent to 0


    // float 	    A data type that is usually 32 bits long which can store fractional numbers


    // for 	        Creates a for loop


    // friend 	    Specifies classes and functions which have access to private and protected members



// G
    // goto 	    Jumps to a line of code specified by a label



// I
    // if 	        Makes a conditional statement


    // int 	        A data type that is usually 32 bits long which can store whole numbers



// L
    // long 	    Ensures that an integer is at least 32 bits long (use long long to ensure 64 bits)



// N
    // namespace 	Declares a namespace


    // new 	        Reserves dynamic memory


    // not 	        An alternative way to write the logical ! operator


    // not_eq 	    An alternative way to write the != comparison operator



// O
    // or 	        An alternative way to write the logical || operator


    // or_eq 	    An alternative way to write the |= assignment operator



// P
    // private 	    An access modifier which makes a member only accessible within the declared class


    // protected 	An access modifier which makes a member only accessible within the declared class and its children


    // public 	    An access modifier which makes a member accessible from anywhere



// R
    // return 	    Used to return a value from a function



// S
    // short 	    Reduces the size of an integer to 16 bits


    // signed 	    Specifies that an int or char can represent positive and negative values (this is the default so the keyword is not usually necessary)


    // sizeof 	    An operator that returns the amount of memory occupied by a variable or data type

    
    // static 	    Specifies that an attribute or method belongs to the class itself instead of instances of the class
    //              Specifies that a variable in a function keeps its value after the function ends


    // struct 	    Defines a structure


    // switch 	    Selects one of many code blocks to be executed



// T
    // template 	Declares a template class or template function


    // this 	    A variable that is available inside class methods and constructors which contians a pointer to a class instance


    // throw 	    Creates a custom error which can be caught by a try...catch statement


    // true 	    A boolean value equivalent to 1


    // try 	        Creates a try...catch statement


    // typedef 	    Defines a custom data type



// U
    // unsigned 	Specifies that an int or char should only represent positive values which allows for storing numbers up to twice as large


    // using 	    Allows variables and functions from a namespace to be used without the namespace's prefix



// V
    // virtual 	    Specifies that a class method is virtual


    // void 	    Indicates a function that does not return a value or specifies a pointer to a data with an unspecified type



// W
    // while 	    Creates a while loop



// X
    // xor 	        An alternative way to write the ^ bitwise operator


    // xor_eq 	    An alternative way to write the ^= assignment operator

    
