(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    225592,       4377]
NotebookOptionsPosition[    213600,       4179]
NotebookOutlinePosition[    214037,       4196]
CellTagsIndexPosition[    213994,       4193]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Lesson", "Section",
 CellChangeTimes->{{3.933044945653796*^9, 
  3.93304494744347*^9}},ExpressionUUID->"c7395808-00b9-44e7-b2b4-\
475c364c9325"],

Cell["Test for equality:", "CodeText",
 CellChangeTimes->{{3.933044861803259*^9, 3.933044867017395*^9}, {
   3.933045003450053*^9, 3.9330450087137957`*^9}, 3.933089475273919*^9, {
   3.9343807628177977`*^9, 
   3.934380771370126*^9}},ExpressionUUID->"86623688-5670-4129-8f49-\
fe0d92cda0f2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "\[Equal]", "2"}]], "Input",
 CellChangeTimes->{{3.93304484482167*^9, 3.933044849130591*^9}, {
  3.934380757328431*^9, 3.9343807789407883`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"8ed7d348-360c-41ed-a94c-e740de8838e8"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{
  3.93304485150222*^9, {3.93438076016508*^9, 3.93438078009898*^9}},
 CellLabel->"Out[2]=",ExpressionUUID->"34c09fbb-833f-4a40-9f5e-fe06cb08a05a"]
}, Open  ]],

Cell["Test whether less:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 
   3.934380794501425*^9}},ExpressionUUID->"0cc19f9f-3051-4241-a344-\
e7f135ebb7ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "<", "2"}]], "Input",
 CellChangeTimes->{{3.9330448729199553`*^9, 3.933044876628175*^9}, {
  3.934380775853985*^9, 3.9343807977176943`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"561f7e3f-2878-4f05-9ee6-10d35d32627b"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.933044877087737*^9, 3.934380799055059*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"a00440b1-b7d0-4cc5-855f-a43dccdaef04"]
}, Open  ]],

Cell["Test whether more:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 
   3.934380809687372*^9}},ExpressionUUID->"a074557b-abb7-466f-859f-\
9c7ab5d7856f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", ">", "2"}]], "Input",
 CellChangeTimes->{{3.9330448729199553`*^9, 3.933044876628175*^9}, {
   3.934380775853985*^9, 3.9343807977176943`*^9}, 3.934380853049736*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"aeed0c87-4b87-48cd-8e3e-8984355b72aa"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.933044877087737*^9, 3.934380799055059*^9, 
  3.934380853789873*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"33b93671-f315-4336-ae96-408c764c6bd6"]
}, Open  ]],

Cell["Test whether less or equal:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 
   3.9343808140917177`*^9}},ExpressionUUID->"1c454bad-a2ca-4df1-bf9e-\
a8dcd50fd685"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", "<=", "2"}]], "Input",
 CellChangeTimes->{{3.9330448729199553`*^9, 3.933044876628175*^9}, {
   3.934380775853985*^9, 3.9343807977176943`*^9}, 3.934380856006117*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"e3fa50e6-cdcb-44a2-bc73-b14e3b54aa82"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.933044877087737*^9, 3.934380799055059*^9, 
  3.934380857318754*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"b8bf2423-517d-434c-8896-1212d90ca724"]
}, Open  ]],

Cell["Test whether more or equal:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 
   3.934380818581053*^9}},ExpressionUUID->"fd0cc58d-5a45-4b90-a7ff-\
9a6296baface"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"1", ">=", "2"}]], "Input",
 CellChangeTimes->{{3.9330448729199553`*^9, 3.933044876628175*^9}, {
  3.934380775853985*^9, 3.9343807977176943`*^9}, {3.934380859162611*^9, 
  3.9343808641675673`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"a8bd0351-776c-42dc-840e-3369d4afa345"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{
  3.933044877087737*^9, 3.934380799055059*^9, {3.934380859603643*^9, 
   3.934380864943075*^9}},
 CellLabel->"Out[7]=",ExpressionUUID->"88d569e4-5588-402d-9153-9d9a12a14749"]
}, Open  ]],

Cell["If statement:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 3.934380818581053*^9}, {3.934380917083724*^9, 
   3.9343809196878967`*^9}},ExpressionUUID->"8540299e-1912-4ad0-9276-\
db4e9ce01352"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", "+", "2"}], "==", "4"}], ",", "x", ",", "y"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.934380910654387*^9, 3.9343809106553917`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"0eee1f7e-600a-4f56-9188-a69278f12b67"],

Cell[BoxData["x"], "Output",
 CellChangeTimes->{3.934380911789925*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"9760ba35-9cd5-4a13-8ca5-450a166bcb97"]
}, Open  ]],

Cell["Select elements which meet a condition:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 3.934380818581053*^9}, {3.934380917083724*^9, 
   3.93438094374664*^9}},ExpressionUUID->"f50530fb-0078-4a73-bbc4-\
c6ba7115ba4d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7"}],
     "}"}], ",", 
   RowBox[{
    RowBox[{"#", ">", "3"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.934380926861409*^9, 3.934380926861907*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"4d1fc7d1-7741-426a-87f6-f7980810c0a5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "5", ",", "6", ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{3.934380928091065*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"b385aa71-86ce-4967-95dd-b8c2205141e1"]
}, Open  ]],

Cell["Test if even:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 3.934380818581053*^9}, {3.934380917083724*^9, 
   3.9343809196878967`*^9}, {3.9343809527096653`*^9, 
   3.934380955047791*^9}},ExpressionUUID->"c4fd222e-306e-4e7a-8021-\
1e21be3a3784"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EvenQ", "[", "4", "]"}]], "Input",
 CellChangeTimes->{{3.934380961474251*^9, 3.934380961475348*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"f84d8c9d-2fbc-4801-9baf-a7b132a61c90"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.934380962351823*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"b8b17db4-aadb-480c-9ef4-696aac951086"]
}, Open  ]],

Cell["Test if even:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 3.934380818581053*^9}, {3.934380917083724*^9, 
   3.9343809196878967`*^9}, {3.9343809527096653`*^9, 
   3.934380955047791*^9}},ExpressionUUID->"7e9fa09b-7ccb-4650-acc0-\
de5c26216788"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EvenQ", "[", "4", "]"}]], "Input",
 CellChangeTimes->{{3.934380961474251*^9, 3.934380961475348*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"a9e84490-03b7-47e0-a503-c2bd9c823009"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.934380962351823*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"f316ad17-372e-4feb-9ecb-4a9666fd0e1f"]
}, Open  ]],

Cell["Test if odd:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 3.934380818581053*^9}, {3.934380917083724*^9, 
   3.9343809196878967`*^9}, {3.9343809527096653`*^9, 3.934380955047791*^9}, {
   3.9343810479034157`*^9, 
   3.934381048345995*^9}},ExpressionUUID->"c6a4acb6-dab9-4f73-a549-\
66db1f9688f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OddQ", "[", "4", "]"}]], "Input",
 CellChangeTimes->{{3.934380961474251*^9, 3.934380961475348*^9}, {
  3.9343810503191223`*^9, 3.934381051973002*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"0f15df01-b33f-41b0-b07e-d3d6429e33d7"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.934380962351823*^9, 3.93438105430138*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"22874805-6d4d-46a6-a640-7b52d0b90a3c"]
}, Open  ]],

Cell["Test if integer:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 3.934380818581053*^9}, {3.934380917083724*^9, 
   3.9343809196878967`*^9}, {3.9343809527096653`*^9, 3.934380955047791*^9}, {
   3.9343810592462873`*^9, 
   3.9343810602238293`*^9}},ExpressionUUID->"16375ddb-8933-46d6-9acc-\
b02185bfb446"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerQ", "[", "4", "]"}]], "Input",
 CellChangeTimes->{{3.934380961474251*^9, 3.934380961475348*^9}, {
  3.934381062391369*^9, 3.9343810633837347`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"5b6795e6-fcd3-4224-a56b-70fc3ef58a81"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.934380962351823*^9, 3.934381064054576*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"8ae35bac-5548-419d-ab81-b66497683d0f"]
}, Open  ]],

Cell["Test if prime:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 3.934380818581053*^9}, {3.934380917083724*^9, 
   3.9343809196878967`*^9}, {3.9343809527096653`*^9, 3.934380955047791*^9}, {
   3.934381068839094*^9, 
   3.934381069358224*^9}},ExpressionUUID->"2cfd5686-0b02-42c5-b3b2-\
f41bf16be9fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PrimeQ", "[", "4", "]"}]], "Input",
 CellChangeTimes->{{3.934380961474251*^9, 3.934380961475348*^9}, {
  3.934381071559134*^9, 3.934381072202896*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"62436a5c-86b4-4fa5-9302-c6a23de78a67"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.934380962351823*^9, 3.9343810731467133`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"98d8e3d5-45e2-4ccb-8dc9-c0ba80eefb16"]
}, Open  ]],

Cell["Test if letter:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 3.934380818581053*^9}, {3.934380917083724*^9, 
   3.9343809196878967`*^9}, {3.9343809527096653`*^9, 3.934380955047791*^9}, {
   3.9343810976623917`*^9, 
   3.934381098359581*^9}},ExpressionUUID->"9487a45e-fff6-4fa6-a806-\
1085bc42e32a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LetterQ", "[", "\"\<4\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.934380961474251*^9, 3.934380961475348*^9}, {
  3.934381086501545*^9, 3.934381093595705*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"bd20a1ef-e0fa-4ceb-a331-1527e3b4e73c"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{
  3.934380962351823*^9, {3.934381089125443*^9, 3.9343810940362663`*^9}},
 CellLabel->"Out[15]=",ExpressionUUID->"c3137ff0-b708-4b28-9058-7664e34c1a7e"]
}, Open  ]],

Cell["Test if member of list:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 3.934380818581053*^9}, {3.934380917083724*^9, 
   3.9343809196878967`*^9}, {3.9343809527096653`*^9, 3.934380955047791*^9}, {
   3.9343810976623917`*^9, 
   3.9343811127212563`*^9}},ExpressionUUID->"b8b7c129-0aaf-4189-bbb2-\
46da2408e309"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.934380961474251*^9, 3.934380961475348*^9}, {
  3.934381086501545*^9, 3.934381123446911*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"b200fcf2-dcbd-4600-a5b0-84386b50d727"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.934380962351823*^9, {3.934381089125443*^9, 3.9343810940362663`*^9}, 
   3.934381124394072*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"03307445-246c-4122-888b-2eac2f033701"]
}, Open  ]],

Cell["Test whether image is an example of a category:", "CodeText",
 CellChangeTimes->{{3.933044880661512*^9, 3.9330448849037743`*^9}, {
   3.933045010762053*^9, 3.933045016167248*^9}, 3.933089476917685*^9, {
   3.934380785486813*^9, 3.934380818581053*^9}, {3.934380917083724*^9, 
   3.9343809196878967`*^9}, {3.9343809527096653`*^9, 3.934380955047791*^9}, {
   3.9343810976623917`*^9, 3.934381098359581*^9}, {3.934381209857836*^9, 
   3.934381226970965*^9}},ExpressionUUID->"c5a33031-62a6-49a5-8920-\
3b1d40861518"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ImageInstanceQ", "[", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
Ew6M5fJqRnA8NziSDaQXxrOXxHkLwsywIHNRUrCmKo8rK8Ly8oCsNCivAMaA
OUYtVeULmkq4lLi6elFDVfGUA+dBBRNqrKpJtGBB6lV1EWVtVA3LUU3GRlWD
r4MJs9YNi5p63ra6PNWxrO/etA5uOYb2ZseYPstp5dE9wWsg1Ko6r7jpnUxu
A1fxQh9PIe/6WC4Zoq5UZOjw3veCWvycqSMiCHhoSzt1gCRLeSTXvP+fe+wl
6pF+GpuGA7m35FoNzA53tX760dtXz50oybmMlDD/+kXRYJdeJXZZJ30eS9Q3
45+1zlg001OKKfmwpKeuqehK5fXT+V9+XHz1hGa848n67FfLdkrEWOcGRAy/
/Yd8nxptkDentkayTg9jqn/v5U2UfAExsfch/v1G+5SB4cFKLg7+CPBq4fMN
+BM7fAuA/2rThZcvtjE6MEfwGxCpjDK16JlKPFMCnvxqCa+SuieRbCa3EfHg
5ZR7YbOhF4p9XdudDp7NfRSW/sxpqnhk2QZyZsYK7UMFCOdogWu0kLdIOYfz
XCP5s6MFmOAl7AdidjjLOZDuGqANWbRDnDxGtm8kn7pGx4tBdVRIjjcsKATk
HGlK9MZzIdFL4oIVeYGq9qSw4jieHWo1HMzzCPP9kmLo9oa2ZmmK9Dk0URRW
lIQUpRFNRUxdHpZXrmhq19Rsz4KyGjIeV9JuNRgYCDuAX9bcoIZwhJYEOQrL
oamPsQbsGJsvqAjpmJK2fC5NtqxMta3quxCw2buO4R2nkNf6dmdFyBbhqzEC
8n03XLeKH8WAhBFIsyxSe8cHmKnoB+C5zQbetO8pQC6Ft18SP2ET13Au0ZT1
8H27Mdqy+ihOGdD20pxGLbt49vjJj9+5cvrTy6eO5l36ouD6uZbaIoWwz2FU
zBiVRuU4xgW/LeS2WTRixWBLb3VOY85FiHZp2mnFwI17y2RTQelDlreyXzdl
WFyTufn/PquNWjjkXL0TNbSAlh7DGG1PTuSezI0kdDtONZbvq+JszyZrAudL
nPYEjQzj1EvOcyKSxoOLc0rMX17WT8n7i83ZFO0pY8NLLonCyzKV1pNeZRoO
xEgqnWUeyIbZANjWvkxT93XbQDbAdgwXOkeKZgWlrrGS2bEiBG/884wXsygB
6hBq93DuzGCGo/+6s482ZNGuw0HKFmlD+nAOqKbO6vFC/3gBbSUYpSuk1WM5
1MU6UTjXlyauOtFReGqovlA50t5Vl9dVky7qKpkaqfKqG+ZEFV5FeVxXuaar
pV085CsqQwpE+aKqYklVGVNBfiswB+e0xwEyroFzrqGda6pagB2fbEBuCJ5B
MluOaeRjXNtEndhkRZr5CLyXtO1ge9M8sGUd2bGN8SL2TTcljNtO4aZdsGnH
KNxyiPhkZ0bC+4eZIVdxH5Lq6+Nz/hICzoIaLylzj5p48xvhFDQ+CJmeL1Ha
uL8w65jWV1WWnDvx68/ee+2Lj94uSr/adKNEpxSZ1GLJUKdWMgaV1ivGFYI+
OG2XWeO16Uwqoay/oac8szL9fM7ZY93VmQdR2rtN1j1i5AudfMmev3Enuvd5
CxbzpbQjmKUD/EMHvinWjKrlG3849omdmGz3cQpsTjUvj6Q2uzH3Qi4deSVG
BG9QgbXAnZgkeeaFkQTMuJIqd/OXfEzJOGf7Zd/+3znzFOf6nkwYaUN/NvCG
FbEynsE2wgE1Hi0G2NBthEtQ5JWUe0Vl8+JyxJywxCMsRMwLCuGuodie0Rzw
DLmmow/60ml3bX8anLN3MH1+AOY5G+khnTEylhMazYVWx8T5UYi2IK8l472W
kktdtQXVeWkVeVeKc84VZp2pLLxWV5Il6rsh7q+3yvp98hvu8YJFXd26vnxF
VRFWkDOJKMvgVcLKKjpOQVEBcxLT1ILzRU0NApP4ZC0gZ4rdEGeuAyNextkV
xLKuGWnjsq5tRd+OCQJgxyc71gy929aR7elRwts5fssj3Z+V7MyIthzja9aR
DatgxTi8bBhanOpfNY2sWcdZhzyJOdv0ndJnXmilNjbKHyM6blqoeMWCkp2o
nlAPUb4DAm8tTPv87ht1leePHXnvn/7j2WNH2m+UCXq7J8aHtCqRXNivGO83
a6Q2g8ptmwrOWpx6tVEtNCjGLVNKMz5WmVl07tPrJz7sry/YCRmf0s5Wtv8l
PMn9BnP7iQ7bVBcWXyHifaep7Sqgmj+AqW01tBOBWRReVOHbk1OWG5786fLM
kyXWLpjqS0ksDFGnylebbkDOXfdX67MMb+4uZjnkBOdmIr7emn2x7Yaqc85T
vp1TnaorpgT85Wfh6w3cY4NWa7vTjAM55oFcExwIs9ZU6xjKBdizonKvtNo+
WuAYyXMJYEUK5sUENsObHWUwUYzRKyzyCvIA9twYnDbVPSj6CWyo8dzAdbDt
G84kpIVkqsMjmRFxQVxaFBfl9+d/XJL2WVdTRc7Fk2c/fafg6vH8K8eunnwv
48zRzLPHr37x4fWLX7TUlKuHWvxT41HTYFBesqGvWzE0xLQ18ak6+G1oNSGt
qgsramLqG0taKHYNkOaxPNWwNNW0aoCFbliealqAA9HU4woP3iUC6V41dCBg
s4E0halvVd+zYRqEaO87WQWbgQ3dpt1PdtGaeRRIL2gHlvSDS8ahNevYlgM3
SMmoeDS32bYmtulDzzofqKx3P2qlRk2/lkrfPuX9gI53Tz0MUy8EOL8Xsu6t
BHoH2k9/cuTIq3/76Zuv1pfmD/a1d7Y1Cgc6x3rbjBqxc3rSP2cLex1uqxYG
OzjvmDGpjTKBTikxyEXdZZn5pz7KOflRQ+GV9Xnti02STdrnuKBnCx/c+Rh4
V+0dtjGTgW2gzZgBPbMrJn4+w11WOk4+DkbejMfKO+ZEpYXtaOMFE4z8tB++
CYKTzFNOPk9d4RVCGhMbJcCwh7sUwJzi+fuXm4Q9Hzm9vEKSgjyl5KngNUYY
bH1fhq4n2zKczzxJhm0wPwH2WLFbXOWW1HomatwT5W4h2Q8feBaVgm2fpBxI
I7MLyMp94qKgqMgnzPOL8gPwxiPZvsHM+SFEBsD2D2UGBDnIECOCvIAIbOeE
BNlRUd6CONc9kj3SkNFQmpmXdrLg2sm0s58Wpn2ZfurDjNMflWWdu3rqo1Pv
v3b11K9Pfv52dtqXw50NM1PimHkspG6ITZZsWJpWjY3LUzdWp2qXJ6vi2mrO
M7MiyBMrMS5p6dgQUE09TrpmwlvXQsfj6HGlhb0E2C100Jm5e90IkvthQjBu
TQ/RxDy0axdsO+C0hfvMZrOAMstuzsp2HGJI9/q0gBsSmJMNG0k3dyYHXjXH
+35oimxANNG9Ru3HYJ5WdliHSYDa+R7C2bpV99b9NsvUhVNHT77/q6xzn185
+3lzc82ERDA/60DOKOhrV0+MBn3OwPxMLDgfj/hmnWaYFpfN6NArHAa1ST0x
3l5XfPFE1smP2isy9yLmb7ZcVK+g2oWFN6twF8q7DfnugOSuK0614eUdWDxT
4J0b/Dbaw0I1eTMvVPJjfLgJTx1dxT+aKoaTS2FuhFcIuZKDah6M6tmXkcaE
J5uYfLPlBsyg+ttN94t1F3+ZsuUpQ57qYEkWBqnMCB+i68/WDxQY+wug26b+
HMtgDiTaKShyCMpckhteVeu8us2vbQXeHmE52PYKSyDXAJsjHaAaGmV5QVEB
1ejEBeHxvIgwH/rMIotPcCU8nhOR5ETFORFp0aI0f0NdZujLba/OKsu4mHH2
o+wLn+RdOX715JGrn79Xk3e5tSqntiC9Ouvq5RMfXb9wrCLv2juv//j08bc1
opGtgGPDKYioS9bM9ZvW5hVT47Khad3cvKKrX9U2LOluIDAH5Eu6hFxzhlcN
beumjk1LF0YEeMaVTXPHhrmTwDbTFgMgvWMfQew5R7ZpYV0AqjFuOQVcsdmy
o+ymRw7C+Qo73+gH2glvm3jTLmbbWimA9yF7K+fOJIEN8ADPfg1E+8DHDkmb
Vd5dcAW804W5197/1c+OffBWSVbG+PiAyaqZc5gtcjHsh8OghEQH3NPznum5
OXs8HrxzsL0WD4fmXW6b3qAUOo0qjbD3Ru7F3LNHR1vL78Rp1QNy+tWqky1Y
k7J9vTbL39MfL9p4ox07gcHEXQo/voZHquGQe3L+BsTnvHLCV5f+uwXuhKth
O4CYUUlUUYA0F2rutznVbFnHxaUbGP83eeXGDPckoJpHCnKMfM6dDFuUd7y8
rMkXfaa6MnX9ufr+YstIuUNQMT1SSsZjrNAuKHSIqtyylqBxEBGyDPq13T5A
LquZHS+C3Z0TFc3T0WH54JmXnWNyWhlEPohYkNIIFx0WkZdeEOdjDEly4rK8
uKJwUV6wpi7e0NbIWtKLMk9fOnn05AdvXjv94fXTH105/nbu+aMV2WfzL58o
SzvbWZVVcu1UefbFspwrl059cuqTX546+lZHffW8zbwfNC6bute0tbvW5s3p
jg1r+7q1BZyvWZrXTA2rxvo1U9OaKSHLwBvKDKEGyTwAM8YtazeL3q3pvm0b
hHoAwRtFdh28XUTAT4Kio/zIh3A3Itp3TyBV5EgfeKncvTdLqzZ7MzJ4Eh4A
m6v3TQ9uUB1S6Vt9wE73omrJvP62R7uPHG0OttywuxLu7+64evaT6+dPFGdd
Hu5omxjpFw51dDVU9DWUDbVUSfrbkC3KBX12izoWcvvcdpdVbzdCqMVWnUwj
HlKLBjoqc3JOfpB39kNxZ81BzPw1rbAkdoqxHicotoOXI/6bTb60eG3i7YWp
vWy8xYXwZvkmd9qJA3b49ge2MysZJr4jmOeY/NBOviOMlUqowPg47uCdq1Bs
8My1moPN2P6+rEdUr3/vRp5vOL7Zmf1mxwNJ5+aE6/b/P5IdttQuOz1ebRop
N45U2qStnsneGUmjfbzaNl5hGy1xiqs9yg6/SRh1qKMOecwhDRj6vKoWr7SW
qBbnU0VORLUOgA2zEZUQvRFhbkSUvSDLjcuLAfCiPG9Rmgt9XpDls4u5MXkB
2N7Ula1PVur6Si6f+ez4r1879eFrF4+/jbfR2qxzFemnbuRfKrp8rOjK51V5
V9qrCgcbym/kXTv32dtXTr6Xe+WTc5+/ffr4e1atfm8tuDkzvmVs35/p3LS1
bU13bFrbNy2dG6bWNUvjmrl1y9K+YWkhMTfS3kzgjRE8Q6uh2OAc6r093YPY
JLYHduxDW46BLefwDlt85B0jGLkVoXBRHxQr+k28vATJLtJ5Mol++KQhQQD1
PReBTTc4JxKcu9V3vLoDj2bPPrFpk++tRkxWbdb188c+OZJz7cvGG2V9nc3N
1SVq8ZB8rEctGrRqlS6z1jYlMyjFLrs+6LeH/TOhebfHZdMrZZLhLuV431BL
xY3Ms3knf5158n3ZcPOjNffzVeZ76WAc68NV0GUiQVt3pnwpL9zxQ3h4YYR3
EzGwE3uQH/BtsxGqUh7wU1PgoJKOJdVoRxvYwzo6tHDBTA0GrH2aGgzoTvoK
bHWVVsD54iaX6ycrM09XXZRXbrqfgvNNN6f9xfbci00P+Y1kLsnCQ9e35zAh
ktdmvtmY/Xbbw0w4BdJGBK+ieKf6Z5W9c5PD88bxsE0e0Eu82iHf1MCsrGFG
UuOb7IrYFUtey2rQvhawL85I5yfb5xQNfkWdR1TiERXNjRfOCXMCojz/WLZ/
LDM4nh0Yz4hO5MYV+TFFLqhekhWvqMqWVcUr6iK8jMhylpQFmK9qijYNtZru
QjjJM5+9e+KD166d/HXJlZOlV060l2W0lWc0FV3prc2FUiG6q4vr89PyL352
+fP3rn7x8flP3/3g9b8/duQXUunI3rp/yT4c1zXsOro3nW1b9pYtW+e6rW3T
AVy7gfq2rRO0b9t7NixtmGxZuxAbZrIiEG3I9Z6jf9fexxR7ECq9NzvGqd6f
FbM+KHZ2HzuRkneuAuPDeQXtOGDt2am1dbAN0QbYu4xnfuwGce7hx3nJ6WAB
l5Lv4INu77rVt73aXadke94W8Pmraosunvq4ojSvb6B1oLdtYnwkEpiPL0Ys
+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
0Uf0g8rRFkCbkX3l2qUvPv/03S9PHr168WRdZWl/T/vYcJdY0D3Y1WAza9zu
6cD8TMBtt0zKfE5zwD0NIz0pHIQ900mGhR0NTYXpyLXHW+t7q0tKrn1BxdLL
Zy5/9kFdwdXDJerK4Pu/2MYZ2svAnQP/ixiJM9XDbJ0luVMstZk3JeDUFhLl
gXzTkmij4htV2Gaf1CFRqbeABzEdqyXawTDfcEHo8gQzpE9krDEL9Yax3Q38
JDR+ZDd/BNimXX6czvd7fBJgM69Cp9fiDZE9F1TbiX/fK04769kSz+//8C2P
3/3+a9D7u9999XtMfvfVb3/34ne/B8Mv2Edf4Pof/vibZHyHDyG+++3X4B/k
v3jx4MnDWwcbkWWnPKJqiamal02DK9NjKw5R3DoUUTUsKippF/lYemQ8IyrJ
jE5kx1Xlq9rqremOwaaCi5+8e+34e9Xpl1pL8waaqrrrSsc6GwVdLTAeBqVQ
PNIj7OsQ97X1NFXajZNWg6a7pbauNKe+NF8tHlFLhGX5mVXFue03qorSzl34
7P0zx96+fuWU3jq5sxrd9Jn8moZlQ+2evRe6TamlvQee5OYsZY6wIuSo58du
eUWHftmBj3SbzEZQg/F2SP0gMvkwqPx60fjNsvHF4tTv1y3Pl01BVXtE1/fd
pvO3m44XG/bnq9Zv12zfrk2D+afL1herzmcL1mfx6ScLJojzw5AOCv8Ub/EB
Nb7OinW8vSLTbtBV15SfOP7e8U+OfPzBLz/84I1rl09XVRU1NlY03Sjp7Wo2
mTQIgA0Pgv9faPWUbFwnGTFJBYK2Gx0VhVPCIcVIT19dmbD1xlBjdWNhVsW1
s0UXPs88/mH6Fx8NtVTcitCBNkl1tSYt8fTjRRszErZHkOIwl3FDckeVJXUn
30cGwukvQ7HdELyRm6+ec8/AV3M4qC//pRv6czD0T9hTp5nxSaqrineF8VV4
fsZsMnW1JLals3hIZ0bR0wTIEcl3ASPfq87/9t8he/fhNuaAmsoMqfMz//in
78Aq6P3DH178/vfP//CHr/74x29A8h/++A0+xD+aCn7l5Ysg/7vffPXtd4+f
Pj24u7eM/HHNLl11SDG5GfPuhp2rLvnCVGdIXEpuRJgdHUMueR1gx2SlG7ob
gE3eV5114bOsc59WXjnXXVU21Fw71FIz2t6iFAzDfvS1VSFp0k6MaOXj8x67
zz2jFgoko706nWJ5ITIzbRjobhcMdNUUZx17/1/OfvJeSebVkx+/89YvflhX
m4l39mjQt+k3xLQdW9Yu2OwNa/uWrWfL0bfj6N5xdvKqCFVIZkdue5EhTtzx
i++HJA8j0scx+cOI8mFYDaSfLeq8qlaPonndJR5qyjr3xdvZVz53qnoXzcMe
TdeifWzFOWaT1Y+15E4JmwySdtVg3Vhr0URv+ZxuUD1UbRY1brokNz1yn7yt
+PJR0VivblJRmHUpM+3MyWOfvPvWG2/+7IeXzxxPv3a2rCSjq7Fy2jhptxuc
DkssOA8fEol4I8HZOZsOGYdWOqoY6e6pKZH2tk0rJ0wyiXJoCIZkuLGuKTu9
Mu1MxvEjGSc/Fvc3H0Jp2Vv8Q7ZbiqP4iP0lmkeLRN2TuIOvSHKjS3eGzXTq
HTt77S478ZWaq9nZI6mdYvxvUyb//FPy2Ct2sBt/QBKHODE7TY9P8l2AL6bz
4sxLpysYUie6s1OGjIlzz/gOaJZg8paq1B83oVOhgobkcZSJ5hZ2RC2zPewx
uUNHcpn+83/5w5//9Xdg9U9/+vaPf/w6EX9+8ac//4YHJ5zfg/FPf/4tRj5B
EOS///a73z7/6sX9h3e3b65F9pa8eyuBu7trD26uH6wENzyaqLoxJC4MCFgf
lCB7caJ4QVG6Olm3pq3dsnS6pB2XTr138sPX8s4cayzI6aora6stGWxvnZLj
t9cw2tdm06lNOrnFqPW73aYptUouWIr6fTP2yqKsktyrkzKhTqOcnJSKhntH
Otu76+qg5J8d/ZdTx94pyb42Jhhcii/cWo/59J3Lxro9Fyn2tr2X1iVn+nYd
g9vT3dszpOGwJQ/9sidh6cOQ+MAn2J8XLdlHtIIbgo6S9prrX5585+y5Ty5c
OPHam//413/3t//42hvHPv/gyy+Pnr9wEhdPn/joyJE33/jnn77/4TtHj390
4oujp09/9sEHv/r0k1//9J9+8v67r188/8H1S5+9+erfn/r04wnpeGlpdmVp
1vnTx48f/fUH77z5q5//+JN3Xz997P3i/OujXS0qychQf5vZoIajntarvW5b
JOAKuMzLEc/akn/eTUW/kc7WwbYWnVhkEIv14vH+2sqatIull08WnDmac/bY
RH/T0xUnslRaCvFqMaEyGqgL6tnRgmZWyrYlN7CzM3NiVo4lbwtJtPyFDIkN
4Kycktpcz8+MSnUJclC/Pzc4aOANJ9yu8CIM34bw8mcl/p5COJFdkmkJJf7K
Ehd2WtDnmxmT60GJhquUn2HSnVok+r4pkZ5K3X/5f/74r//59wQtMP7TCyg2
xj//52//9b/8Bnj/4U9fA2zG9recZE41Hgf+ifRc/Om3sCWw5V99de/Jw9uP
HxxifPro8O7hxq3V4KpLGZtqo4xSTn8HhP5wgIH+3tymdXBJ27iqbQqpe0oz
Tl/9/N20Lz64UZDZ23Sjr71RJhgVDvaP9HTqNQqtUjohGjZNKTVykcOqhW4D
7676qsGWG1rJmFGtsFhMaq1cr1fi5qbqiowLX3x+9K03f/aDD995taamoKAo
XSDuXQ7NL1vFocn6HUfr3bnBPUf/gWcEcr3v7L89B9EeimqbF0xdAV2XqKOw
qexqddHlS2c+/uz4kZ+/9upP/uGHf/OTv/vhz3766j+//nf/+JO/+Ju/+b9/
9KM33nvzJ6///Odvv/vTf3nzx6/+/G///pUfvvLqz375L//8zi8/Of3Z2++/
9Z9e+eHf/t3f/+Vf/+CVV378ox//4H/93/7tX//lXxRlZeTnXj5z8ujnH7/7
wVuv//pXP3/7tZ/8h//9fzzy+j/kp5+7UZFXX55XnHNtqK9VMTECwi1TcreN
Op2ou8+kmbMZHDrNejQcnptVi8YnxcIpkVDWP9RbWVaZdqHw/MnCi18UXDvh
0QkgyDe9kzfn8X6tuxegt2nges/PqnARBjnfIM/+REICOZ4AMlOdfMc3pcoa
KbvyIEbtTJD9hIbHrKlgfoPqHqzbhDWchIy8Nk4efpGdzxOf5qv53Mkktlvy
aiH7GxA83eYZbhJ+U+or0yOW/HtqCQfOM1O/PnViNt8TBDiBK7MZ3/75z98Q
1Rj/9RuwjUlCvf/1G4y4ge5Jgv3//tc/I4A3v4JHA86cEszffPPdb77+9qv7
9+9u3VwLbQcsq3bJknls3S6Gem/7DNsh227AtOaUxXXNS6rKdXP/UFNx7rnj
ALv8+oWWqrLBzrax/s6hzpbBjmalSKCQjOlVYvOUxGqUw2oOtTS2lJcYVPLA
nFM5IVDKxuxWQ8TvnjapB/s61RpZR0vVFx++d+qDd370N//u/SO/yLz05ZlT
xzu7msLz/sU5g1PR4Jqo3rAP7s6N7c6Nr9pGHWO1LllrV/WVcyd/dezTt3/x
2j+++tNXfvb6z4+899Z7Hx35+euv/eA//fh/+ff/7q/+7gdvvvPWK7/4p7/5
4U9++Mo//PLIWz/+51/83Q9f/dW7R9546wgu/uhnP/3y/IV33n/vb//+Bz9+
5Ud/9X/95V/+h796770PPv7k6I9+8sN/93/++1++/trJY0fPnTtRmJNx8pOP
fv32G7lpZz585xevvfqjc59/nHP1TMbFk2lnj7fWVmgko621JcKhDqdZPWPR
GjUyBAiftxllQz2q8aH4/0fWV4BHda1d41AoxYp7AiEOMeLu7u5uE3d3d3d3
dxKCBifQwr01SnFCgKBFK7T8797vzCH3/3h2z3Nm5uRMCmuvs14fG+hvrANg
1xQV5sXFp/oHhrk6epho2+jIxgY6/TzV+8NoAwCbtFgfqYdFUAH/9CP1xOVI
G6cT6wxE7CnOjJvTXVgOQxB+CuDaefNkF+FqDKbTRFZSm0BhhmocW+7gBkF7
k71ZSDME6nKhpZS0WrmDXWh54gvD04BRJ7I3iCIU2GQvjGOMoI7WPjRgrjgs
BDZsNCK8j3fAL4/dz5ieUYyDBXNXXr56TIFNoMsAG/GML9nYfv4/wIbt8Pub
5whsWKhnKJ8D+T9++uThzP2bN3/5njgDaRQexPZ/p8Z/vHgK3rnx45WfLp26
PNF+rj31ZFXA94O5LeXpRqqyxvKiTkaqoZ7OKVGRGfFRGfFhcCzLy26qKCvM
SM5KCI8L9HK1MAp2t2soy+1urC/MzWpsqOvr7ehpb4bLPJ1s0hJjayoLEmIj
vD2cIwM89FUld21bY6GvYaqn5u1jExjjl5AUO9LfWZ4X626j5mChnBAODOlg
oCajqSwmKsqzcs1X32ze9O22Les3bdyzl1tWTkFBRVlSVo6HX2jzzp1Ch8X2
HeTbzL17zdbte/ZxC4gf3C0gsPsAP7+ouJyG5j7Bg5u49ljY2Frb2vAJCfIJ
88vKy/AL8omIHFRWkd+9j1C3jramhbG+makxy9czKTEmOMArOy0hKjwoLirc
TE9bW0nWw9EyITyoqiAvPS4yMSIwJToo2MsRVqinY6Sva6CTaU5c6GB7XV5q
QkVu5khba3lOVmlWRnFqUmpoRFpIiK+VDjz4SjMiLvRV/HaiDQD83VDNf4ZJ
KJCUPFBNAkdMUwEm/2G8mWmeg8XyKKdvnyGuv19PdoFcoYuwKyZmc4ZCNjOp
fSTic6rr9kmy7p7ugSNKcYzdo98bXeKodjBpCq1OjOyTwSKn2X4YSvstWLlG
CnzYCSe0eo5UZ5Cq/18mWnBzETBTtzb6J5lxBgywX7ycJUrj5cOXL5GlHzJg
RnECLwmwqfCGi1GBAJ7fvnsJ2AaEw3r1GpTJHLwPnwL/zzy6e//BzTs3r/32
n4s3vj//24/Tt3+9DhLl7q1f7tz95fbPV6+dHTvXWzzVmADb8+Rgm5e1ibHs
ITs9eW87s9TI6Py0xOyUGJAi+empKVERQW4O/nZWcT4epRkJpTnp1cUFxZkZ
TVUVo/39HS3VAd72Nqa6xXkZYJSlxEcmRYZEBHqB7nW3M1WXE5MV5tFTVdCQ
P6wkJ+Zkb5UQG9LdUd/T0erqaLd//04hYV4+wf3rN36zY/eWLds2r1m3dsPm
LV+vX79m48a9+3lFDssIix2WVVRSUlMXlZXayrV7BxfXhu07d+7aIyEttXXf
nl28fKBPlDQ0DsvIr9662czc0tzcXFlDxcrG3NvHXVJKbMXKpULCfKrqSvqG
Oh4ujj7uLuERwREREW3tTfn56TkZqfXVFRHB/nZmxvnZSUnxYamJcclxETnp
ibVlBdEBvrF+XnEsN5aVvqn8IRMpAb3DAoH2FvmxkfmJcbXFhS1VFRU5ORkx
MfnJyYXx0bZaMvH+zgkBTlVJnrOX+n+YaLk2Uo9haxr3rMWwIGD7Gk0svD5a
z0FpE7EcKWBQS6OTELsNA5cC8H5hR+fZURtMYSUBFKKB0fHSwd4IZ2ne9eke
rNZhUI1cjaqYcY8wThumkQL2xQLLFDvyoexHvYHT+n4Zr8fWzSQnlrZuRmBj
p1aSxEJzsSjZzlIqngVdzbYH2aL6EQhvivOH5IS+Axvh1esnv7+Ze/vuOSwU
JEjdcCuk7qdzj2YfPwCLknoCb5JI5YObDx7+dvfejYcPbt9/eO/eXaDz89Mn
es+PNl47MXBjeio3MdRUWcJCXdZUXQY4uTgjqTgjLS8lqTg7AwzJWH/3aF+P
jKjwwpS4rKT48uKCmsqS7uaGqrJcf3e79LjwtsbqxrryMiDx1CSgwbL8zOyU
OGtzPWsTLQC2liwYaDya8nLBwHv+LiGhAS2drV29bWrq8iu+WbJl9+Z9fNxS
MhKCwnx8AryrV6/m4+PbvnPbms1bt+zaBUrDxMJcTklxPx+vjJwszwG+TZu3
btqyWVCQH3gbJIqYhLiSojxQ9PJ1a+1sbM1MTDfv3CooLAB43r5zy9btmzw8
nfWNtMPCAyMig8PCg/Lys6obanp6ehqaaotL8tLT473cHUqLchtqK2KjghPj
Qj1crKNDfN3tLBPCQrIS4kKdbTX5ueT2fGspI+5rpO2irR7mZJ8cEpgUHlqS
lVmWk1uRm11bXJSfEOllpZuXGGisKFAV7/ri2tiPE9hyAWsVm2g/HzIpALtM
X+cs5HDiOhsjWda/sJvPfJnVTnB+ksRr0FVIuw520sYRrcwsGE4aVTuGLFGc
oF8Rnh2Uk7EnNpEfaPehIMHWnXiCtTzsyAsA9TjbsGX7YSgV0/lKZMGeujZG
hrL9whkbQZw5OAeHGqRAsABpVBeUvYnSAMql7zxGbL8EzJNrZgHSsF7//hTW
m7fPENIAb8A5vol0Tb3cM+hFBOENduXs4/uwSKBn9j68nJm5dffmjzf+c5ko
k/9cfjl3t6uz3N5QxUFPxVRZ0l5fKdzbKT0mKis+Nis2PDbQLdzDOtDZLsaP
FRfoA09hMBgrCnLLi7OK8tN6O5qOj490tjZVVBaXl+fX15RWVhYmxIaFBHqn
pcX5e7uqy0koSYrKiYtoqsjZmBt6utl7+7i5uNu5uJrbWBps3rJ28Yol6zas
3bZ9k4Ghtpm5kYiIiKamNi8v/6p16/bw8JhaWskoyH+9bjVAVPiQEMB45ao1
GzZv2rp9y/adOzZv2bZv3z4u7l0Lli3aL8xnb2unqa6xbtP6BYsWfPXVV6tW
r1y7frWohLCqhqKzi527h3NgEIvF8skuyGlsbujp7kxNSywozG5rbzwyPlxR
XlRZVpieFAe7z8XaxM3aNNDTBZSJs5GWtsgBE2lRYxlxS0VZlqWZu4VxNMu7
IDEuPzGhNDsTeLu7vrEsJSnIwcjTSEGW6+uugsin300AIaO1xVGnAMJmbKpA
jnR6HYCZVvdU0kVzYHBCLi0EQ+MOa8TY2pgMSO3BiDZoFQK/Y2yVS13KtKve
OPk6Cm92Exsynm+qB5NPMMOQbpBOBtsoWvCJQB4HR7Gssu1L4yyO4wVN2p/o
biL54ejHJvux4caJZrSLkbcRqygkUCejWw+4FwQGqg7EPANmUCAosPEcgQ03
YXyAFNKP5l7MPn/xhOL8Pg0APSQxoCeEyWcxjjkLmL/38NG9dx9fX70+5War
Y6WuYK+jZq4pY60tF+npVJySmBQcEM1yTQ7yLE1LjvJnxfh7FaUkFmWmVBRm
11WXHZsY6u/r7OluP3P2ZHlVcUV1EWA7PS0xLi7M0kzXwEDDQFfNVE9F+MBO
Hu4dFqZ6+jrqxvo6NjYmFpba+jqyuirSEof4N25aB6iWk5X08HSxsDSRkpKy
MDN3c3MTPHRwzYZv9/HsFxUXAXyuWfc14H/Hrp1rvtmwi4t72+7t367fIC0p
w8/P+9WqZQuWLOA6sNfayszU1HgX194FixYuW7Zsxcrly5Yt2cO9Q0FZRllJ
LjIq1NvXIzEpNjM7rb6xpryspKS0oKKqdGC0f/TI0OmpY0DaXq5OoEz83Z1c
rAx15CVM1JRNlWQMJIR1RQ5ZqSsHOdomB7JSgvxivN1DnO1hsyeHBSSH+SUH
+uenJJRmxJvKCcpxrRqqTZq5PMqZsVWPqUcIbDKri5pgxIQ8QkrmAeGclK0a
pn8sSVakWUyEwMdrSFYM6SiLCRsdtHyyb/5ABHSJ47ykXyZImhPGKBm4UsLH
pFlQJh2cUFEnOZliJ8dyshCpW+YYZ847NoiYR8W0VQU7pI4OE7IBORFJpmnz
72+fvHkHZPuc2n3sYA0gGaQFimeUGXDy9s2L9x9ef/zjzYePv797/woXvAML
fSOIag6wCWMzwMZIJQ1lPpx7NguwJxe8mH36/NHTZ0S0zz2/n5EcYKQoaaQo
ZamjbKMl52mqkxIaUJCUBP9q/vYWkd5uCaH+uclRyaFBucmJnW31w/09/d0d
Lc11Pb2tFZWFDc013X3trS0NVeVFaUmRFSXZfj6ucpIihw/u3/7tShFBHiN9
LVmZw7o6WqpK0gpyh1wcLaxNdNwcrZ0cbfz9vExNDPbt34MgPygsqCivsHX7
NiDeRUsWghkIymTBwgXLV6xc/fU6Lq59G77dtHvvLkEBvh3btu/Zs2fDxrUL
Fy/g3rfLyFh3157tS1Z8tWTJsq/hzzer+PgOiIkLmxjruTnbaeuop2emlJUW
giyB1dRcV1lVmpubDageHR8cGu5ra210drLLA8Owv9vGSPPQ3m0qoqIsGytX
I70Yb89gJ4dwNyd3EwMXfR0vUwMvc8MQJ5sIN3uWjZGPhX5easzx8aGkQA9T
eZ4fTjbdO9fL6FKcN4ppG8R+pEnRBIHUQc1JUmq8SVpAsDOuSUI1dkc5SnMG
OBUEbK8ITQLExFd2ie5UD60LJoglwzWwOpiT40ceHMc7ONF5YvdhKTGNhrO3
CQIb7kM/IoDHbBNMUCH+Q6aZz1GySdEngxuEuP5Ii/gmpgAZrn/34dnb98DJ
c4A3JrzIePNgMQD+48+3sP786x1iG96BI6y3714h4SPnM7RPHeAkvoOMjQu+
hcYuAf/sy+DN589mP/39ob21zFxTDmS2vaGai5GGg46qn4N1emREAssr2NkG
OConLjTazy3W37exsqyjvbmns6Whurypsaa5qba6qrSnt71/oKutuS4/Jz09
OSqQ5erp4mCiownqeu+WdVvXrN607hsVVQVtbU3Rg/xA2kHBfj4+Lh6uNjHR
4Z5ujgd49vILcO/ctemwpMj+fVwLFixavHjxggUL9nLtVNdQ5ubeu379t2vX
rl+xYiWcg/zYvWuHlLT47t07Fy5cuGrVV1s2b1DXUAJrcdmK5YuXLlm4cPHy
5V8tWrJYWkZCUkpUQ13Jyd5CQVE6KjrU3c3R1s4sKSkqKzu5uqa8sCCvqrKk
samquaW+ta2xr7/z2vUr1VUV/h5uPk4OgR5u2YkJfi5OYDLHsNxd9LUsFGSc
9NTtdVS9zQ2i3O2CHcy9LXX9rXQTgrzGBzsj/JwD7dRe/DCJyEHLC7Og0WmG
vgXa2wS1cTs64qiEIGFKzHdCxwUnMYkONKfJ1fBTv3IysXFwEgpp9E7jkTRD
o20JbwKvTrBn3mHXIEwXQVcJJ7jTgR5p8iCgGh6NUPIsoAjHUA7jxyPu7okm
HH6HOp+Zd8Aet3qSPfgABAaoCEAaB9igH0B1PJsPbEAvQPqvv9/DESENC95H
rwh6/DBew4ngEGuUZJg8JdH5p8/uEWt07hFyOKgajMvDlUj1sCM+f/58/uwR
U21FZ1MtsB/tdJTCXWwDHa2AqLMiQjIiw/LjE9IiQsNZrrlpCYDe8YmR4oLM
hNiI7vaWvu62gd4OeI6XFeeE+HtFRYZUluWGBXt7uzkoSYttWbNs65plXFvW
iAvy2dlbgcT19XSrqi5NyUz2C/Rm+bn7sTz19TT19bS8vN3UtZR5DuzduHED
ABtYd82a1RKHRSwsjRUUZXh5efbv37906eING4lHevf2LVt3bNyxa/vGjRsX
LlwgIy3p6GSjrCK/d+9uoGoANvxZtAhIfrGpmYGllZGtlbGXl5O5hRG8jI0L
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
ARdjDgkGLqkzkO1FQT5HYHM4nP0R3h+d3m/fPedodfwK8oOfP/8zPtoSHujk
aK6nJStqZ6Ac48eKDQ6KCwkuzc1qrquqKiseHexLTYhiudqkp8dnZadFhAR6
OzukxIZ7OFq6O1i4O9mYGGpFhvnDM728rAQYGyzKksqi1Py046cmJo8dgR9x
cCRACg4NSk1PAfCDPNBQV3a2cwoPDdMz1DIy0RQSPLBy1Zqly5cALFet/lpG
TlpNQxW0SmAQi2vfXmkFGRUVlcMSYlKSEkDM+3j26xvqiYuLOzk5BQT6Gpvp
f/vttyBg1q1bJ3yQby/3np27tqqpqdnb2ysqyADVg2JxcLQxNtFxd7dPTUwI
DwZZYgAqJTsjsa62Iic3FR4fvX0d8Dzq7mk7cXJi6vQxIG0g8Itnjo/0dzdV
lmRGhTrpapkpygQ6Woa6OFhoKTobquvLHlSTPFial3LtNClIf3i+BzgTiZpN
1xyXMpbrYhkvZ3VitgZOfEZzD8N8NCDCDmdTeVyHnZAJ/I61MexNx0l3IKnS
DcUOx7Ob+mKzPpzERIOS6B7EI7ElgaVp6JPUGZF0JmJmEnVBvXlsbJ/swuQW
dl4ru1ShGZ41wPbU20PzbyfqaUVePRNShxPqlH7Jdnf8ydYeTFQRgM3xeMxg
CP7Fq5lXv89yPOHseDqTBIhhd8bdjUYougoBxkDRsPAb2Xboe2JCnj45oKvB
m5cSbaWroiEjHB3glxYXE+7PKsxMy0pNrCotDPRyt9BVj/ZzC/F2tDbSttXT
djQzEeE7cPDAPgMdZXNjLRcHc1cn64ryokvTl8+eu9DW0ZqalRYaE9o30N/T
29E/2BMRGRIeFlRdUxYZE2znaGFhYWZnZe5oa6OlrRYcEaiiLqetpaqoqAg6
ecHCxQDsDRs28B3gDQ8OIGamod7aTev19XXhYmFhwW2bNsrISCmpK/Pw8MTH
x4eGBgsIHlhAeR6Ozm62UTHhrm6OmprqBoY6IqKCWtqqvixPbV0NcytDOAdL
tqy0ODYixNbCKCs9AX5nHx+X3My0qsoSMCGbm6tHR3uHhrpGx/pOTk2eOjYx
eWRkoLs1OsA71ts9ws3Bw1zfUk1BT1pU6eB+VQnBEB/X6pKsS2Otz74bI+0I
zrALzJFIsU0fjtNldw6hfI5ki/YaO6RIR4V+yZemEXmSasJ2p9TRTjh0Shcn
ZRRd5YhDBrRwT/xebBfJjLdmsrvJOa1HAF1981g7SBFUI9icB2USKiJiJMKn
mLWFWSU0gZZQOv0RrBFmCnzgV6KBFUK5SKcIbKDr93/8/vbDKwbYTKSG469+
xITX4Yi7Axcn8v4UKRpvCOSPwmaew/AVAhsBT9j70/N///384d1jFbFN5poy
QW52RqqyCeFBxTlp8RFBwT6evq5OXg52xhoqoMAttJW1JIVkDuzRk5cRE+Db
tH6NAA+3kZ62s52VpwswooW9g0V9S8Pla99Nnj5ZVl4ZHBxYX19fVlZS3VDT
2NoC6NLUVvAPdHd1c3B2ddI30LCw0rewNlDTVFBVU5Q4LALqYtVX3yygf5Yu
Xa6qqgxSoaGxxtjCaNmK5bJyh7UMtbbt3i4rI+HibC8gxA+03N7ZUllZzrV3
50LyQ7ApFnh4u5RXlmTnpINt6OBoCUi2tbOUkhaXk5fS0VU3MjFUUVOMT4jO
SIX/S7+C3AxYMeGBMZFB2dnJYRGsxLjQyrL8jta6waEuoO7xI6NA3QBsoO2W
hvLyrCR1UQGRnd/aaCgCaRuoymcmRdWVZfZVJM9Nj5AaQNADZ3uYaVzMyEXi
OuaolJvsae+0kTtFNXbY+41TOIOpekxMB5UJO6wzjo7Eeo7V2cLkl2J8kD1d
l7pQ6FODKBCMtuMjA6FO3qFfh44R4gk/SqgYDViMk5JYEsnaAuMXq+k7cGvg
swZ9hkSr0IA+PkGQb9+8fcaha7aDGoANjP1/fHok2Qn9Hi/YQfY5BtsMwmnY
/RkDaUAyugpx/fX3hz//es9Id8Yf/u7jy0+fPn3+599wH6N93yx0NddhuTok
RoXERwTEhLJsTXSt9LVhmWooyQrzivHskeDlMlaUXbNqBUBI5rCYEO9+dSW1
uIiopMT44qICVxf7mPiI9Jy0rt621rbGrOzktNSE/IKs5KzkgvKCkLBAaRlx
XT1NdTUlGfnDssqSFtYmLq62O3dulJeTdHax27ePa/HCJYsWAvcu0DPQj4gK
Bfp1crXz8vPU1dWVkBEzMDc4IMR3SExQX09LWVnxm7Wr4pOi4YkAWnrFsuUA
7L1c++ITYwaHB2pq65tbmyKjQm1sLdw9nPX0tcDe1FBX8vNl+fn5BQb6N9RW
dLQ2BLA88zKTQ1hu8FwoLMpKSomMiwurKM1rbqgc6O8aHekfGx04MjZ4bGJk
eKC7s60+NSZU+RCvuaq0ttQhWMZqChGBHtkJfsfa8uaujZKZXGfZ/f+xCRgi
nN2PlDPV4iad+Exi32fY4/mYNA92BdnJTnY5JFDriU4aEETDjS0YGGCzS9RJ
pJs2+jvajPUsP3HsTbb2OMWukcS+anRgTR+nyUkXJx2FPjiOkUJLIGSiUmCn
jDcTyQFm4xiJmSL4cWQYOk+QwNHAhDU/CvP/xRORSBlUc7L45pC9OXkjzzjv
PGEySeZ7vwHVf3/6CAtO8CWgGuzEDx/fMP5wuJJQ+gcS9/kX1MjUkNTeNQaK
cnGRofBvHeDh7GRpYKypYKKuqC0rpSYpIivMI8azS0pgv8DObUCOoIcN1TVc
rCxDAvwb6quBNq9c+a6wMN/F1SEk2C82NrSpubawPDc4xC8g0EvXWNPSzjyv
IBsuExcXBSEhLS1ibWeupKIoIS6qraZsZ2vh4m5naW22YuVXq1evtrAy9wtm
ySnLc+3bDTScmJQSnxi3ev03YlKi8A6fAK+ImDCNyyxV0VRKSU8wNdNDHQIk
X1JSVFJW2t7TkZKWHBwaoKGpLC5xUFFR3tHRXltHTUtTPSYmyt7etqAgr7yi
GKRReloiwDsxMb61BR4uec0tddlZqfExoRmpcQnxUXX1hWXFWX3dbeVF+f7u
TibaKoGeTp42ZqriQsrCvPDSz9O2IM77+X+PPrwyQMZsoXcC+yPRTqTYjJR0
NMWOu1Ndv51u++10GzMkHUOK2GmELZI5CaXspz91uCH3YniRqWEBbF8frv6R
whvFOZ7Qjmdk3SB+PFrGyGn+gLclbeHZHeO70D14iz41fiG2bRtRIFRUo9Qh
iSggwkcbMHELEwMI+E90MAYFLkblzhPALxkWRWDPV8uopefbgxx3xxzQPh5x
a3C4+gMsCuz3FNWgQ9hbBi9DVBNb9cObjx+f/fX57z8/v3cxVZIVPJAQFZWT
EWuuq62jJGmuqaArJ6kselD18CFFUX7A9uZlCw5s3cLLxbVs0WIHU8u81LTC
oty+wa7xo0fGxo+cPH2ipqaqrrY6PS0lJiYmNCrEy8c9KTnW0sZYQkrE0sq0
tKwgOS3eGoChIq+rpyEqekhPT0dfW8PAQM/awUrfEJCn6+3jX1ldpamtsYDK
CzgWlJSXVZcvWrLw4CGB/Tx7d+zYcfCgkJGJ/mEpCUs7i8z81MPSh4Cu4XJn
J7uRkZG8vJyG5qqYuEhbeyvAvIysmLyCtJePp7GpQWhEoKOLLfzOaRmpXn7e
FVWlo2ODpaXFmRnJiTFhTnamsBMTk2JTEmPcHG1DA/1YXnZGesr1VSU5KYnx
Yf7ZSdHhAd6WelpgcZhqKDhZG1sYKDdmh/115wJF8iD2kSbd1Okkiy/Ti7D7
NDZOP9uDfUXgHPuEILxJrzOOk5Do2JPs+OD/l8WE8+nI9dR9QfqWjBNPNZIq
u8aB0/oMqZ6tWLCGkTjx2EMQqGZmPy9ADsEiippsBPaMV3YC9rF2NAEIacNX
DNdh9QQN1jQyzU8oYwOq2TBm8IZgQ1TPd2igGoEfYWePEJUC++IVUvT7D7Aj
XlKrEM7ZwUqka8A2sDTG4j/88QIu4wTl36D8hhOQ9O/fv3j95gWYkGWlkaL7
N6YlxqUlh9jDP5ikkIaEkLzAATWJQ6qHhRVE+MR5uDcsWbjhqxUWejp8e3ex
vLyPHDlyfOrE5emrUxfPTh4/OjzSd/LExNHJsa6urvqGpqLy4pz8jJycrKCQ
QHkl6UMifCrqCvBOQ2Olkamembmhjp62lq4aiG0HJ1tWkJ+qqrqHp29be2ds
fJyuvo6UpCiB9sJFngFBE5NjkodFpWUPW1iZbt347aGDAiZmht+sWamgKg+2
535+brhwxfJF3h7OLU3NNbUVk5MTQN2enu66utpc3LsOiQjIK8qERYSW1ZYC
4IOC/UDhODrbZWZmFhXmV1cXpybGudlaGGspW1uZJqfE5WQmZafEuDpYSR3k
93OzrSxIr6nIHxvrSY6LcDQzcjDT1VGW0teUtTJSdzBWvjBc/eKHCYyPzG8c
PTM9hGoEe6ejLAHYs4eKXujFKY3Yr4/tygAzk/q9afSwhYnI3DrReYuSNjsD
CkdyUC1BUHoSvc3tjC2JzUyYlpXI4Zw6lybat6QDpTJB7+lO9JwQbJ/qxlYn
ZPoelUmkJoJspR40B9i6iOMS4QzKYZ8zBuN8CsUjpu3hAoGB8EYdwrzJOO7Q
y0FNwld0p7xh1DVHYAOwSUT+4wey8DGB4oSg+t0rcvOXz+ee3/3333/Hxmp0
VQWzEpPCg3y9naw1FaR15KQ1JEVVRPhFuLbD2r9pzQrCoAssDPTgMR0ZEdzV
3ToyNvj99Wvnpy/0Dve39bZl56RRMVCclZsWFu6fm5/V0tbs6ubo5+/t4+tq
ZaUnLiGUlJ4YGRUCLC0je/iQqJCxgba9g5Wbn4+FtVNuYVV5ZUVRSWFLa4Ol
jemK1V/B90mpqR0/cxK+jp9vn4mxIT8vH98BXrAc163/WlNfWUD4wIrVRGDz
7NpeXpLf3ds1OTl58uyproGBzu4ORQUZwPzyr5YcEhHMyMyNS0kBqzYnJ8fS
ygTEj5e3K+iThqbGsqLCwABffR31rKykuPjwuLiQgsxkLQU5cwMNa3MdNyfz
jtaaxrrKkvzssvx0Y31lIYHdKkoiylIHskKd3/x8muD24pc2pHgk0y6mh9hD
AaYHsTHpzKVBbMM7f1DXl/bpU11EpRNQ/c+sVSyQIVKZ9vFgpszgLDAcZoqD
fTHBlT2cnVIu5lRz5oPQdvG0ZxQtlicFlZgQhcW/OBoVTzgmJ6F3eIepKSbZ
2nQHYbEbulCwnoJx8THAnue7RjzPYT4JHtE2nA9sanhi0cEzNEIZJTPfckS6
Rn5mvgvfxP0Cd5579ujR7B0A9tGJdhNdkaKMNG83hxBvR2cLI2MNFTAbtWQl
FEUFFUWExfbvUxAVlRU5JCosFBsZ4R/gGRkf2tbR3NHbeebcqcGxgab2xuTU
hOiY8OTUJJC4Pt5uxpa6aRnJoWEBVVUV0TFhevqy8vJihw7x+vq5EE+FnLis
nCRglVS7WJgGBoUND08ODo309g3k5Wfl5qUJCvKDIXlYUSYtOyUvL01ZSU5V
VVVeVm7L5o08PPs2btxoaWEGEpr6+hZamJtOTg6PjA709HUeP3msb7i/s6cV
xAS6WUREhaTllZw9fI6dOt3Q0p6emREYxLK0trCztwwLD4xNiklJJTK7u6uV
5IpUF/v7uqXEhuemJRhoKuvrqMbHh+dnpYAgsTDW3bFxDc/eXYpSh/RkBK8O
1X64dZaD6h7kZzqkg3jb0IScofOMANXYcZeZgsGcM9O7sO0MqBqcicDMwyVE
fZpwNeav0hMCe7QEkcYRkNjBGAGPKdxYdHaD9pgihiFdtB6nie1OoSUGDIZx
a7ClOHWhYJSHnYiCvR1o6THm5WLgBq3X/2s2wpHK5qevwRjEWoOXs/NRTQsK
aIgcEA7Ip1e+pq4VBDYDWsYTguvdx9foQoQjnON3oW4nAdC5B0/nSLY2fHrz
l+9tzZTz0xKtTXS0FSVMtJVUpA8ZaSo5WhjrqCiZamt52dl52FrrKisBaZsb
6Xd2tQCMS4rzS8oLgJkHR3o7ulpj4qJd3BwTkmLBHGtuqouIDvEP8HZ2sUtK
Ti0pLbewNDYx1ldRVrSxNpOXk5KTPezu5WznYMt/UEBSViYjI6uhrr6zu6ul
tb2wuKCyqsTd2YEYqt+sPigqEBUVpKujtXbtemVl5d17tm/dvm3vXm4tDc3J
0VHefXuB2LV1Ndra62tqS0uK8/p6O0ePDLW1N2ZlphwUFoSbLFm6YP8BnrSc
nNq2xkag8s6+gYEBBweHiIgwNw9bkNbwRIDHUENjTVFxXl5+JjxfSgqzkqJD
7cwNba2M3d1tgwM8woK89DSVJQ8Kih8UENq3Mz/C/cW1kZun25A8H1zALugD
nKHPfV8mx3GmcSG8aUP1oZmrwwza4SUsuOb2pb670wPM5Fz2nNBzfYBPmkpH
cU5TrVClgCa/c6b7Cw7PsCetM2hHoCJuGcTOm1DMrvlFkgdwokOG3UVzij3e
mjFm2b2qUO1MttDWOmzxAz9LKfolw9vI1exskFePOZlLjxmnBxA1+vQIYwPU
OSU2r9n+EGRvorRBeCA/s6X1x98Rz/MXJ/rzhEQ/n87MPb//ZO7247m7nz//
nRTjC2Z+cU4a0JGlgbqGnJgg9zZTAy03J3sPBztnCxOJAzzivLwyh4RN9TSA
Gy9cutjYXJdbkJmelQzStLyiKCsnPSEpPr8wJzEppqysJDU12cLSED6KjIuK
SUpo7+5JTU8LDAx2c/d0cXEyNjYGvSEhI7595w5NTfXBobGxsZHK6oquvv7j
J09UVpVmZ6Vpa6mhg1pPX9PRyfYAL7+ImOi3mzZs27FVTExk27ZtbU2NcdFB
AF1hYcG+/vZTpyerywrqa8qPTx47fepEUlLUPu7dsBNJAomCXHxC1NBo39ET
x0+dPjMy2g9cra6p4uLu4OflYqSvZWtpFhcbWVKaHx4REBUeEBsVGh7Cys1K
tjLV11aR09NSzEmNb64pk5cR4+fZJsyzvToz+NF0768nm36mo2kBYyAnCP2S
aVxkvAU6Q9BPwrSSZka9gD4BMp+dHn50ZRgVy5eZL9PEAoXLcLouaXB6ns6O
oYqFmYrLafrHLq1lkMwwMG4EBpMU5Ox+mEj1JHfrJFvqoLmKuakMP+Pxf9sg
d2G9PMn3PkWu/5U4Utp+mWhlYiUMXX9pqkA6jcxg7QxqEsAtzQYksUXsRvKc
NG149PLFk1cvnyLskbfhhmA/gnjGnYILuPr9HySmyeS+wneh95v0MHn28Omz
O4+f3Z59+gDszTOnh1TlhRoqSgN83JSkxTRkJZUkDipICNqY6ipICIMmsdXX
UxAX1ZWXM9JWBaUxefzY+LHjxaUFfsG+nj6ucfGRQHeFhfk5uekurvb+gX52
9lY6uhpRURHFFYXVTVV1zfUtbY3d3d3efv4BYWEevv4bN69fvoJ46kLCAs9e
nAY8T01NtXf3tbV1tHc09w91JydHL15Egi+iYsImpgZ7ufat2fDt2m837tqz
e926NStXrrS2MW9vqVWQkYSLQiP8hwZ7S4uyB7pbJ4+OT02dSk+P3775WwD2
EvizdEFCfPQPP147cWqysaU2KipAU032AA+XpKSEioKsopwkyAxfD5ek+Kjq
iuKG6lIAdkF2ehDLC1YAy1NfW8PN0Q7+cmzMDXm4NslKCof62kwfqXl0ERRp
+w/H60hnyEnSThBeIkuj0sDR5Ahs0nEXp11whhahRcmmboD61eFH343ACRI4
Z2jdMC4cWjd/DDrToHK+ikAEsvuKYEMStAqpMkE5PX/h5A4c+I6RSrakp/5G
ZlPMfxNvjjIeo/M3jrYygRIGgb+/ecEJMs6iCEGsovHIVMo8nZvBkoTXnPoC
jNRw4phzmBCFSYDspJG3zwHbjHHKaB5Oc567T5/de/r8Ps3lnvnzz1cFuXEu
DiaRIQE2JoZqsof1lWS05cTFD+wW2rNFjGeniqSYrqqSvIiIl6tjcBArJi6y
qqqqML+AFeQbFOoHMtXRwcbL0wWI0drWwtTcyMbewtfPp7q2Iig80C+YZW5p
EhQUUllRBrZhZHx8bHra1+tWAyAXL10Unxh3/Pjxk6dPnDx+Aui0t6cLLMHi
svzgAC++/VyLFy/kE+BdvnwpXLzh2008/AJ79nKvW7dh+/btK1YsO3RQICc9
edmihes3fFNYmF5TUzJ5bGR0tHd4oH1wsPMAz74FCxcD5/Ps39vV2XLh/FR7
R0NpWV6Av4+6kryHi2NkZKSLg72LvbW5ia4fy7O9uamrrTUiPKihpniwpw1Y
Oi87JSoyxMfD1drCGCxrf09HIb49CtISVmba9QWxoEAeXuq7faHj5lQLsPcv
x2ljJdJEvRUzo9CPTYQHxSqddoFDAYZw7jl8itO74FNANV4JR0Q1PR+F9fDK
CM4/oiOQUPCw5y1SkFNdPdWLTXLYNe80UxpRTVTKmb47Z/vvkXkifZzx62QM
DTPwlKFxUqGDGbCcPYJ8znSywmYRTN8e9HtT78dLJvtufiAG5TRahQxdMwUy
WCmACSTsllAv55W3v5zFjBG8EvcCpg7SSPpzejdqk76effly5tmzu8+e33n2
7CHpPTV3b/bJbfiV7t3+UVdHylhPI8Tfy9xA47Agt4zQfjAelcSEDvPtleTf
52lvFxsRam9tUVZelJGd4urmGBsbW1pWGBMf4erh6GBv5WhnGRMdHhoa7ORq
5+7lGBYRnFuQDlraxMwYLk5Pz2xraynIz3Zz85BWUdywdSNgdc26bxKTE4YG
e3r7uwDSl6YvNjdXgw0bGsqKiPAL8vcODfHftmM7XKmro8HDe2AP196dO7eL
i4o5Ozs6Otrv3bNLV0vVzFAbcG+or9TYWN7V3VxXXTTQ09hUX3FQgBftRydb
y76u+vHh/rrqkvq6qurKqgvnz8JWSs/JKM7Nra8qz0hPzs3POXbsWF9fz0B/
V0NtSUlZdlVpfnRYQEZybG5GUmJMmLWFvoujhaWRjrSooIOlfn1J0sPp0UfT
ZNIQGVdxvhvW7bOddHopScbG6Y1k8uOlfoalAZkE1YBPSuPMjEWEMVt+Xxmh
E7vYkzLgCNhmzzm6CLJ86OHlYdTn7BjQ+X54E5HJSGtGUTBj+Dh7jTgn714c
YPq6k1nVtD8VYp7d150aC/M5/AvI2R7vDupvZMN+fucEphYGXzIxF0AgopGp
Q4dF8p1eEWCjLGGnv9KWaIBt7PgHCGf6WwLIYb8wGVAMtl+8ePjqxX1YT5/e
fvbsPgIbzh89/e3Vq0fjY51qKhJ62krwaFaSFpER4ZUTEVCTllQQPqh4SEhX
TSEnNyM/PzcqJrwgP8vVxR7YLD0tMTg0wNnT3t3TDjAfFOjPYvnY2lkmJMeE
hAV7+bjr6GmDmrW2Mevt77t17/7oxNGC7EJ+fv7lXy3BOIycgnRjWz3AbGRs
+NTU8bKyvNjIgKaGkvKqzJ7OJksLYxJYVFFITohUUVXYun3L1m3fihwSAPGT
lpEcFhZibqKdlhgrJSTAv2dzVkbMmZNjbc01/f3tvV2NPs523yxZfGDf7vz8
5K6uur7+rvHJkZ9/uv7bzZ8vXDw1dmTw/LnToE/+88P1W7fuXLxw5fTpMy3N
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
meyjAx/70ShgC3JK+JQzH7x+CST8gIEZag/U1RhJJ6HGl49AaQCYgZlhAYaf
Pf4N/vYeP/zlyaOfYQHC6Ue36cltpk0rIXlKv4wRysH2HEYqX7OF/dz/Nich
/ak+/vH278+/p2dH7di1jo93n6yMhMghAfKPe4Db0ckmITHGy9tNSVlWRlbC
1MzQydkuIjLY18cjryDXP9AXQF6Qk9lQU9nb3zV28mhhWVFIaADg2dPbo727
q7yygsVixcTE9PX1DQ719PS2jwz0NpYD10Zbmmr5+bh2t1f3d9SBQi7KTwO6
jo5kCfJxKStIOttZRYUGZiTHA7CN9DU0NBTk5CVl5CThYWGgqezlZhsTypKV
FnJ1tU6Ni4iPCChIT+hsqRvq6754dvLs0b7uulyh/VxLly309VYNC9Hh3rMV
eHvTjvWOTgbeTspJMbbnz7RcOVH+/URGlK8WKBJJEYkolkdZbkZ8GMvSQNNI
W1VZXgaxvW37xv37dmuoKsRFBkcEs+qaSj7+8/bTp7/+/usDxnlJx4Bns48f
3njw6/TD/5ygvgsiuQl/Xh0hQUYKLXZmCCf3DzCPi/EWoiccp8bACY1pDoD8
nr06BtBlQjkIV6q32aYltSuHGBoHkxYIn7D99BfpzgzYZVQ02T7UQ04U/qUh
BtjEkXK+h8T6z/chtlGEwAnIFWIy05+Fb4eT1y9mYAFo375+/Pbt0zfvOG36
qNImGSD0hLz5YubF3H2C56e3Xz6/SwD86FfA89zMjaezFNuzvwKwgasfP7pB
CHwOvRxf+sa/mlfzy1SNYaQG3YzI5JwKdxBILz5//vvOw2uunkbwxFeUJRkd
KioyXHt3SogKAYaNTfSsrE3BBty5a6uBoQ4obV+WR1x8JPCwqbmRv59XTUVp
V3dbeU1FUkZGQnJGdQ3I5t6uns6hI4MjY4ONTTU11WUnToycPT9x4dIxkLIj
/d3j/V0djZV52Snd7TUDPc211flpKRGZ6VGZ6RH6OqqGulrKChI+nk7xMeEs
T2fC+kbaKspyuvpaDo7WEREBLo5W3h6O5iba9tZGEf7eqVFheakJvW0Np46P
X/nuzOnx/nAfh9XLFvi4y2YkW1lYiSxaREqGFy5dISsvGhFkm5HiUFvoc6Ql
5buJnIn28M1rlwG3+3vaT44P/3D94vfTU2X56aYGOpoaKiBFANgrVy0VExUq
yEnOTgdrI+TBozuf4a8M84T/+PDHx/dgrT9/9QSenk/u/PjgP6duk5Bi//8K
BjzvR8ol7Hex9yH1osygS5zweReAHFQ3YPu/E3UgVLBqkgRlaBwTUA0Ynv3+
CBzRSUIc3aCHr7KDO8jMd+BubN/gF2BTaTTIwJKxGdFDjotyONujgldS9yDb
xU3yDGmzNdThsAD2gNt3v9NFmfP5qxmsGnhF05zeviYIh4/evn0G2huBCrwN
DP/i2R0A9tzszbnHN2Yf/vjo4Y8oRZ4+/g3efP7kFruHPDUtYT2dg5ePkJmR
nJm0K8A2eYC+YXe8RN7GLfDPv3/CvggJsZaVFAa2VlOWsTQz1NZQVlWQAVNN
W0fF1EJfXUtZRk7a29fLx9cjJNQ/Kzs5PjEOBEZdbSUYfe09bSVVZfXNbScv
nrn83dXR0eHwqGChQ/v3cG/j4+Xeu2f77l07lJTlfP1cKsuzhvtbmmorxwZ7
Rwa7GhrK6hvLGhtLG2pLCnISgwOcnB1N/X1dtDSkFeXEgKu9XO1D/L0MddRA
Wnt4uoDpamFt4uRqZ2Vt5uflYmWsa2Wmmx4XWlmU0dPeeP78sWNHBnvaKuTE
BKWFNmQkKMfG6NrYKKxbv0lLz2rV12tBURtbKOXn+1QV+DYWeVw8WnztZIkw
13pQI+ammkNDXUeO9I8OdqQnRHjYW6XFRZsY6oiKCPHy7eMX4DYyUoO9FhTk
/fONH/79/Pn9H79jpRLmCf/+jjppH919/Nt3YE7ene67famHyRihOoF4M+ZZ
fH2A54fT1LS8BHTaC7CHN/ElIJwO9SCN4skA9GOgUtpx6DmyNApvYGbAMGiP
h98TLc02G68O3aP2JlUjKF1glw3QLyVxnzsA6SucgenUYERUU/ZGd0ofuebi
0P/4Sc7RIOY5sphumV+KxN8+w743mK2HeU1gaOPCwlsSan/2gFiIIKFnfyGo
nr357AmBN8gPXGBIzoEgeX4PDUy6F4gmwXlkv7O1zZeiSFwkWP9q7vXb57Dm
ZYCTLtxAQecujh6WPCApedDC1MDG3FhbR11XT1NBSVZXTwMEgJa2momJUUhw
YGJSbE5uakxseE11eXFJfnpGcm1NVVFRQWVdxeSpY8eODfl62m7etgYrXNBl
TctiyH+0E8hyLy+Hvu6aioLUrva6gf6u3v6Wnp6mpuri2qrCoBAPFyczTzdb
Y2NtIO3IMBaAHE4M9dTtbC2Cglnevh76BtosX4+wMF9rCzhV9XSySo0O7G4s
P3Nq8uTZE+emJnOSwnavWxHhrlyYYVBc7ODsIL9l6wY7Z0/SsWHRQkkl7qRM
z4p8v77G0F+mKqcG08SFdsJvZ6ijeer4yHBPS2F2fHxMcFJsJDwIPJ1slGQl
VRVkFaQltu/YBAo/Mzf+8g+XPn369OH96/ef3oMhiTnw8C8Lf/OPH958dOPa
zH/P3bk6cf/C0MwFglsihtleOFTFbIcGwdt0L0Du7mXiMCTJ2xziZcfiL/Xf
Okf84b+cavvxePPPJ1t/neqiGdpdqArmUTdRKfeu9N+7OgQgB1Yn4J9mu1mo
U6Ufb0u/gpqc3x25N012B9YBoUbCfFqCbRr0RPBTW3II1TgJ7nPQDr/Dl7Yh
JAj+CEUI8jOcfPjwElDNuJ1JOxGQzURv/AbC49nTW2hCvqBgxgXWJUD61Ssw
SGfR7zF/LAL5iO0hf8apu3mNKdnMBBAMSuKRZAn+9fbzv5+TUsIFD+0GMWBl
bgAUraGp4u7hBP+allZGID+s6QSBisqShsaarOzUqqqC+PjQ4BDf0rKC7Jy8
oZHB0ZF6DUUhdHnAgX/XN+pyuxWkuHTUhNUVuOQkt/Lu+hY/1VSUz08OLSlI
6Wit6xto7e5t6O6or60tTMuIjQ73dXawtDbXs7M2AlS7Olna2Zno6KiYmOpb
WJqQGH1GsrkZqBVFfx/nEJaHn5s92J61FUWXL0+dmTpx86drHtam3GsXVWfY
NxQ5DfSFZqWb7t5D+k0tXr4SjmKyPDEpDiUFrGP9qb9eqBmsDuLZvpGWT0qe
PDY82tdWlBUfFuIZHOARHx0U5OOmr6FkY27obGOmJC91WOIQi+V07Mzkp3//
+fPT+/cf3338+B4TLLEdLklXmL395O7Pj+9cm/n14sMfT927fvQeqOLpUZrO
10t19QDjuAYFPgtCggZ6kM/Ry4FAIklQF4doKhTb6APe/uVUC4D8pxPI4X0k
djM9NjPNwfbVIeBwAPbj745QNU5sSXjnASd2iYBHPgdiv8cJ36OHkGQn0kof
fPPB/xihI1+CShw/JFpwTBMGgiVAFNXVb+k5k6eKBiA6nAGxYGm+ewdb4Onv
b58wlQiY+AGfEmDTgA4zyAYDMfA+BmLQT8J5WID8eI6eEI4IZ09MIHLlwzMg
7ZnH94xN1bW1FTXUlbQ0VczMjcwtjOzsLQHVNrbmIAAys1IqKourastKywrT
0+NzchIKC7JramoGh7paWkuNteWQlteuXBloo1IQaxLpr+Pro2BufZjF0oiP
Ng8L0gv2VrDQEFq8cBH31i2AzLqKrJ6elr6hlmMnhts7a7KyEkIDPd1d7I31
1ZydbEH2SEgIOTqa2tobOThYuDrZgqS3tjJVU5NzsDVLiQ0N9nVVlRM30lNu
aKi4+dtP//3u4tmpYR1FefWD2+pyrBsK7Jrrneuq3V2dZdn1lAsX6xqJxiTZ
lxX6TI3kXp8qL4q33/TNKvjIwcn0p+tXJ0Z7qgoz4qL8He1Mo8L9bK2MFWXE
E2ICM5Oi/FydpcQFtLRlR4+NfPr8+eOf70Bgv/8I6w2xvj99BIvyj7/ef/jj
7fsPRPW9eP147vldMI5mb35/74ez976fJPC+womqgISgWoKm9jFSYWA+bBjO
ZGLr+CbgGdgb1i+nOkgiE9XAt4FX4Z5XyW0J1C+PwpFAEbbJd6BYiDlJjVD2
nZHnHzDwhsvoIsnh0wOMxmZ+GQbezIK7vXz9CJvecJrpEZL8knFNawqYRXfB
C6avAtbFzM8PxFQ9bKSDOwJnItBFgI3If8kpw5nfDw1zpTCaP7/JPAZ3Xr15
Cjrh4MEDYKk52liamhiAAtHW1dLQUjcw0PMP9PUN9PZgueTkp1XXlUZEBsYn
huXlZlSWFdZWZerrySyhymPj+tXZ4bY1+S6RIbourmqyamKLFizctHmrO0sn
K8MC+LOs0ComUGX9mgXLly2JCHcb6Gvs7+vs7mkZP9pfVJQFcIoID3KBr7cy
iYwJdXN1MDPTc3W3cfOwjQwLDAr0dXW1jY+L9PNxdbIzjQ7xtrPS9/F0aG6u
/O+Pl3/55dqVK1N6Skqm8vsbC1wHmv3bahxqytzLS5ycnZQXL1iwfOmysGDT
smLv5srQM8NFZ0bTbI2FlyxZBr82PINu3/jp+ERfbKRfZKivpZGWm5Olvr66
jqZSTAQrOyUqPzXZUEtBVVm8vr3mwz8fwDD588+PHz99+OvTx3/++ftf+ufT
v3/jgs/efXgP8P79xRwI75nbP8z8fPnxf87ev3KEOih6iWy4MghSHNad6QFO
aOaL0YcRSeISmR4DVQMa4NGV0YeXRh5OHyEC++LovfMkkYlyeBss0vr1bN+t
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
rLyUlpaWvb2tlo76wUN0qA3xn/UA7H/Wr1u//p8tm7bupdvPw30kyt+3uiA/
LsxbgJMRqNzOVu5qU/zLW0XnG5JC4wzdfLXZedjWrP5YWvGdbwo8WxPQXOt7
tjwwL0nPQBXe/UdWTqDpbN2LtifPnz2prTyemhimp6fi7GQbFOwHSt7Nzc7K
1NDH1T4pJiAuxjcgwC0yMjDI3y09OSo2LMDB2tzWwsjV1bK0NK+9/cmd2+f8
PGxoabajRDkzdbCX4p2mzGetWW23kr+8Ku15UPD0UlK4h+ZeqnWHmdhy8zI/
gjL/2FlxvMjaUtfKWFdDWcHJ3kJDQ0FJVtLKVN/B1iTM393d2So9IaziWGZ5
4VEvW5OEhIihqfGVf5cB1SCwQWYDUYOoRiAHokbwXphfmV1YRtOb5xZ+zC7N
zKCYycSP6fHpiaEJ0sDk0MAEqW98pG+M1Ds2/HV0oHuk9/3wl3eknjejPW3D
H1+NfHk78v0D8DzcMD7yfWK0d2Toy3B/Dxhp4NPo8Pexsf6Rkd5R+OzQl9H+
j/DZoe62/q4XQ51PYCEMtt/ub2vpfXnl6zOioeDhufd3UCwFB1V6HtR/eXyO
HA8nEIvZm5z6aW+BxwGAHIA90H4dXiKt8ooSGMGZJtBISCxhGYyKV38MLyyM
rgJ7lDLTj5KdwThEamSBPBKNEkqiNNogmwdYEtAlD9WZ+DELuEWJeyRmEEuQ
Ay+rNVekVdW9WkCLpD7gfHBudvLfP/A/MZ2SEqOjo+LgbANS1sRYz8TEyNza
xtzSjJkViWSq7bvB1m/esn0HFQvzIUVZKUC+t7dzUWZ6eX56WW6SsowQQNdK
W+JuU9KTO3n1dVEJGeZ+QfpScqsBwLVrrO2EiwstTpe737uS3HIuuCjJSF0O
vnwNJxtddU1J+9tXXZ0dILNjY0OVVaXgweHl7RwV5Qe+YaCPh7OdRVxUYG52
UlS4X2igW25WfH5OclpidEJEqJuzDcAyNSnySnPd5cYaGzOtHdvW7NpJBX/s
nZvWcLFS66lyBDtrGavwSwscZN23Zc/m9Rb6Bm+e3nrxqOXerYvpqRGW5to2
lkYqqrJKivKSEsLSEvwqCuKWpjrO9mbgoqorS8WG+ZwoyKspLQ71cY6O9h+a
Ji3/+/sX8hxXQHiAGgGHEctssv1eAQPqxgZQR7FBdL68/HMFk/wcOJeE/Zid
xgMb8TZDRPZhGsT53NwMvmF6hjxfeurHOFxcWJibnf0BF+ElKmYbGxod7UNh
xr6e4Z4XRNXKXfAxkTh/hXzG/meXcRsmqPH3d868u1kLRzSTBE0eJnN4P8Hb
Q23XiRD3tWHQJwSBYwWOdQjpzY3VvOcVoi7lChGaI0fwCECOYBj/b5zIqmHK
xfmavwcOE/2/46BAsMdHLA2CmVeruIkPwhFFCOGEuGfiL/Yewcpk5n8tw5Nw
J6ij6R9jKz9nB4Y+hkf6gOcYGOLr4emsqCSjp6/l5OYqICK8mQqx39atVHv3
7ael28/CclhRQQae/17ersnJ0cCZMaHerZdOW5toAUQlBRivnY54eDW9uT6y
5LhXeIyJtZMiLf0ukC2HDu/PyLYryTc5XWbdcib88cXYzAgtOVEWewdXZsb9
xaU5j57e6eh8U1113N/bwcXBFDxTF3eHkBAvL3eH6Ihg0CH21vrZmbEIz/Hh
8RF+wKLg09VVH48OC/Bys3ayM66pLAIZrCYnTbuDipeDlYmRnoFmOwcDHe3u
fVRUVJs2rzvCyubr4vrk7g3S93d3bjaePVUaG+4tKc5toKdkb2MqLycpKsgn
yMcuLsJtZ2Voba5naqRpY6Vnpq8aGeyelxZfXZJ3ojAjPNz38Zuns4toABcG
NqAaIxnOV/79CTKbEh759ec3PoF3iZc/4QQYHgMe0A4IxzjHV+At/O784hx6
F3Vq/yDKftA0MBRaJJbJ0hJaF6Bz0Fog6pAnRvtHB7+Nfuka/PBqoONR/+vb
4GN+fYGSkigX3w5AvQG6AvQ8aBIgbeDwdzdPAo0DwnHEgxLTw9Iahb4J0u5/
cw2dvL4GapyECBxOro92INjj4BvGLWZaLAywWzexGsqAdzHNAiAXiQFllM1o
0FizRUTUgElE5hi0MxNzCwjnwLfA0sRiIRGrZhQ3wqMbiLzP/7GCiBMU2Z4d
QzWHKBJIar3TbGFtICkjrGOoDaJaXlHOwcHO1t5u5z6UUmFiOsTOwczByXKE
k5mLmw08u0AfNx9PJ9C9qFExwLXpTHlOctTGf9aC6o4M1H1yI/vhtcxTVSGp
aXYJ6XZuXsaAMAc3lVOnI04Uu9YUOz69kdnaEKMrv9vLw1rP0Ax80bDQwFu3
rz55fufatcbwYA9DHTULS5PImGB/X8eIQPe4yGBfTwdLIw1ne5PEiMCkyKDE
qIC8tFj4pRXF2bXHj0UGuPu52mQkRhbmpClIizMfOmBooAOOraIwx9myjNvN
9Y2nq+5ebWi7f7X7zZPPPa8bagqS4iOC/Tx01eTMjHVMDLXUVWSFhLjYWRlU
lSTtbAxMDDUEeFl9POyLc1MKMuIB/0dToquKcxpOFuflpZ6/1Dgz9wOVQiE/
EaAI4FwEfAKqf/33mwD2CoHnP3/++/ff//5DCZ1fcDNAfxlDl4JtJGN+LS/9
Xl7+s7L06ycYqPT5lYXZJQRsEDMAbKRFFzCk5xC24baVZUA+aHi8aQvRY0Ua
HRlApP2lc/jj68F3j3vb73x/3TIAlNt+A0f8CL1xFbMugfBGADaI8J775+AI
fI7LYvteoXtgFeDA+OBbEPxXYYEApOHjsEzgBIANJ0RCcBD7cdiDg1WGyXOC
2GYab8s7S4AW0yxKRxJu4//6fOdHAcZYpSwsjOOvAuqeJ4ANBqJilaVHsA4H
vUEkH8f/BjaB6glYCDNEcgffcOFSnZWDGXiL4jISKmrKQeHBfgG+XDzc23dT
H2JiUFGWU1SUFBHjlpIVERXjU1OTM9bTsLUyBq8N9K23h/3R7PhH964K8HDC
KuBk3NNQHvzuWXljfURerl12pnNKsnlSimlqomFloV1zTUhrY8zzm0ePJhhL
CW6kP8CwZSs11aZ16kpy1dWoVqq5+YyPtxsHO4uBoXZxcTaKKvu7leamhwd4
aClKGWrI+zhZhvk4p8YE56fHHctMKDqafLI0t7aqMDM1ytvdxsPVhoWZgXrH
Vi0NTXY2DnFelhO50Z86HoJe7fv8+sXTlid3r15qqo2L8XdytDU3NgD1bmFi
rKakKCMpIijAbainqqMha26qSUtHraoqe+nc6brKksrj+ajYuyj7wpkKwHZO
TlLPl/fE/E8K2c5jbAPUwakkPMrFVdL+A3j++fsXAJsQIT/xyeLyEhhWJnBC
hjegGr1EugXYGDmeAN25CTjim7F/urQEVI4Ye35+FpQJIUumJsE/nRwBTY54
u7d78NPbge4X/e+fgF858PYBuKJYOWNUgz5BqoNoScPJ8Q93T3fdPvnhNkpo
gsv59UkTju/htYArATD5w8kqY18FqY+BjQkZx5x/EDFAvBMHFipkogZyJoTE
PFlmT86Ti06JSOACAvPiIvkEw5siy/G6mMM6/C+jdPXO4EgIYvvJGWIKNzzL
FpemL1xq0DfRVVKRFxIXVNNQtnWxVdNW37BpPR0drYyshJS4kLGBtr6epoS0
iKSMqIqqAiPTAQFBbiA6UwMtbTWl2MiAN8/u1ZQVbtyIenXF+BnvXUwndZ19
fbf0Sl1UaZZtTalTValDy9mI9tsFr+/lHo0zNlRh3UMFBP/Prp3UtLupGOn3
ubtY158qz8xMVFaRV9dUCQ/3j4lA3eKRoT4Jkf7gnzqY65nrqjhZ6GfEheRn
xJ6tLWuqqzpVUZSfFVdTW5SfkwhenqGe5rbtm6l2bWdjYxHg54UFYmmgfqGm
rOvl/bdv7j150nq3pRm0elhkQER4kK2NhaiYgKWZoZ+nq6SYoI6mipGuOuhq
Rsa9u/dsy8lMun3lfGXR0fLS3Iaa4/WVRa2X6upPlpytq+4f+gbaYJnwEwlM
EnG/f1cA1SsrS6jk7+cCkDlSJr/IhhEOP6DFl5cBpnDbMj5B52QaXyFwjkBL
zEgfnSB2yALGXlxcXFhAIURYTYuL83MLYLNwAnob4A2PD8A2SO7JiZHRkcHR
4b7R/k/DX7sGP70BeA9/eDHc+XCo895wx23M3n1IWlwnOhqu4UwNzqejsa73
6zpv1YABmX9+gMYBoQZkotgbCxUinII0NmAbdReOD+OoBTkniMCMsodglFFm
SF0TwMYQBbwtLf8ghMcYTp0TlI7wjI/z80h1YINzfB0bKo4lJA2ezvr3eAc8
XWp+bnp6Cldlj/YP9lTUlGvoqisqK/AI84hJi7Lzcu7cu2vd5vVcR1js7SyN
jXS11JSB4pxd7I5wsKiqKrOwMe/aQ62jrWZvZaIgIaahLFt/smyi73P1sUzq
7VvWoomReyoLvPu6T39+XfXmdk7Xo7yHl+MeXg5/czP9ZK6bkgTDOqL9cC/V
BmYGtJXS+jVrudiZiwoy8vLSpaXE7O1sivLTo4I9kxPC4+OD05LCSvNS4kJ9
HC30PR3NshNDKwszy4pQmCI3Na44L7n6RH5ZXlpuaoyVqf6GjWuFxIX1DLQV
laTAWTDSVgZ6v3q+5tqlM6hlrCwvNzPZ3sUuPCwQ1ZkryZqb6IKi1tdRB4Gt
piQvIsq/jXoDrNkzFcXA0gXpsSfLjjbWHr/YUHm+rhxW05UrjV+/fyJDemUJ
5WX+LP/5DyltTOAomv0beYiE8FjBqAZNAoapm8LVBAmT74HjwtIiylfOz0z9
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
oyQhyM3KxLCfdi9oflFeLh4ONga6/YcP0YUGup46nldXUZidFJkY4V+UlRDq
48zPwyYmKhAfFebr6aCmKO1ia+pmZ5yfEX3lbPWNi2caz5RGeFja6SgkBnsc
TY5Mjw0O93U20VPS1ZQ1MVKWk+KLiQnq+PB2/ufiv/8S3bv//UKVq7+XMD8v
oJH7KOKBJm4RUMcRjB+zk7PkUup5+P9d+jlHqUb+ewMXyt5Df6sLTMuAVaxD
4AigxS/xFZxqpOzYgiFNztcQwB4Z6kXYHkE5GjTP51vXwKeOgZ52sKHPaJwm
qfvlSPezke5HAGzg6uF3LcPIMbwG6AUjnESCooniVQAzHrCJd2slZqJ+n5pG
O2Wg9Pf08OR0/9LC6CL4faBJFkfABwRCXkElYcv//vcTgA3/XLh3BliaIq2R
gFkaQ57j4iw4nkhjA13Pop04Rsb7wRsdHPp6++6VtraHwMzf+z48eHSj4FjK
uaaK2JQgTX1FNg6G9ZtQJ+6GLZs3U2/dRLWZ6PbatJGKahvNrs3UVKJiEpaW
1pqamiCShSUEgWw9vR1y89KjokO9PRxN9TRM9DUjIwMzclPSMxJio4IB8IGB
rmrqkjq66sGhQYBTU1NtVRV5GWkxLU0VKSkhS0tDIWHeI0dY+fi5JCVEONhZ
VFQVXN0cBYQEbWztvX38kpISEtOS0jJSQ8MC01ITvNwdwgK9wwJ9tdWU2A7t
o9+7i55uLysbAzs7A2gSdnZGFtZDwnwcShJiQrzs3MwMh3dvZ9i1i4OenoGW
FkieaR8NGyvjmn/WMrMwnCjLvHnlbEvT6bMnSyuOZWTEhaQlRYIi0tXUOAm6
JCvR0sxQUow/KSbgQUtja/OZ2vK81NgAZzM1PwfjrLig/OTotAh/8E/VFIRE
hY8ICbMpq0rU1Vf3DXybmJn8MTu9AB4h0A6RiAH9jGkZpMjPX4tEOesi/Ff+
/L2EdpeYnwZsA8iRul5ArdnECIKZv3cmInZ2G6WAGRP46sz/IQKuZGCvEjK6
SFA3CUf5yFEReHwQARZcN4KATeofQzVRfWj82gASJIOf35E+vRvu6Rj80tH/
sW3o/XMg7eH3j4be3kIKhOBqBOxVbMMJmi7VcX2kC11HE6uIPRQA3kChvb1d
xFyy3h+TwyvzPyYmkDu5MEdC2EaBOyQ/CPE8/+v34jKSIj9WDckPvKk02Dza
CR2FVlCIY2oE/sUA4WPjAwDj12+ffBns7ux5lZOf6OnvaOtqZuGoxyvKdPDQ
TnqGfYysTDtoduKhYxs2bNq0eeu6DajEdC0ajrB+05aNmzdv3kO7T1lT09DU
REhCRFBCkJOLlZeXRVVdxthEB6QyiGdwyiIi/MLDvd3dre1tDby9HW1sjISE
OP5Zs5ZuP4OioryvrzNcUVGR0dRUlJIU4eVBI0oEhXh4uI9ISYseZjmkpqFs
ZGSgq6vr5e3r6u3t7uni5ePu5GgLcj07IzHAx9nP3d5IW1GMn/PIYYbdu7Zv
p96ym2bHzp3U27dvX79hze7tm5hpdrHu2spJu02Bi8FEgsdSks9ZXtBZVUqa
j0OYm2PbdtQR5uVq//n9s1dPWm80152tLQNRYa6nyUC3z93dPcDf10BXw8XZ
TlVNUUlR1tXRrCAzpqokOzcNVq99dLDbsazYstyUzJiQME9HdztTYX7WIywH
+flZbJ3Nmy6f7x/sQ5y8NEeUiJBbwADGP1d5e5kgKEqBHz7BbWLgWmKQI60C
NL6Ayq0B6jigPUUO+o1jyY3lB1Ydf8Mb45nC2Di4h93G1RG7U4QmGUQ6ZGRg
bHQIFUSR+seHe8dIiLdH+z9NfO8hfe0C9h76+nbk0+uxTyhIMtR5b+QdYPsm
Po523h7ruDX27uZ4ZyuqvgZgd94Ye3dj5O31kTdkzA8O93z51tHV9RzNkxz6
MjOFmtSmwYucHlwiipqI6Mf43AICOWiS5Z/TOFIHRA04X/m9sLIyiRTIr4Vf
v+d//pqbWxibmkGewtDwt54vHe97Xra/fXi2qdra3dIt0NHG3fwAyz5WnsPs
fEeOcLPu3LVl69Z/hEX4VTQ0ubi4jsA1Hj5GJlY6hkMHmZkOs7FuptpG7rZd
v46Vi8vY0lJZR5NLmI+F4zDV9k00e3dIy4goq8kKi/GCcuHnZ+fhZD58mI6B
ftf+/TvpgFV3Uq9dbdel2bODl49zx47tdAf2CwsLCgkJsDAzCApwg7bhF+LW
1FZzdLS3tDDT19NR01B18vDw8vf28HKNjgjOTIqKCPGMi/IP9HJwtjLWVZLb
sgFtY7pt27bNmzeiQsF9OxUFmGwU+ZyU+dzUhfy1pFKt1AvdjDPt1VId1HTE
uPds2bR3DxoBAXrj0bXzH94+fvP85sX6qtL8tNrSAkN11XVr1rCyMuvraa1d
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
fmIMo9K+f3//+YMh/S8edIYNIxmDHHgebOnXT3Tyh9AzBLZxRnKWYGA08W81
zz4187+wNoWrCe9ygshXkstCcAId/MrhoT7ScD8CNviMBKSBokmDX3HQb7Dv
08D3D70fX3/vfPLt9Z3eVzf72lr721pQuUj7jfFO5DyOdN1CGvvNjaG26yhT
8wrPQ7tM6eHFIAcDhIdEBp2oLK89farhbGNFVWVFTeWZuprCsmONF8/evX/t
3ZtHI4M9C7Oj37+/7+39ODLypbevs+fLq86ux60tDXduXWhpPZ9flBoaHWjn
YiUlI6ikJCEvLyqvIM3McmDH9rV0+3bQ0e1SVVOIjIz08vH28vO1snO0d3G3
srfW0tdwdHOQVZITlhDZvoMKkMnGwgoeHK8Ir76JgYAQL5Dw2nVr9tDtBW7X
1tcDkt9KvQNPtmZjZdLVUVdUkZaUElJTlwfxwM7Otn37NvDmNm1eR0dPoygn
rigroiArIiMpZKKvSWQGHb08XYB7neyMxQSYuVj3KckJ6WgqKCqKi4nzq6jL
Obja27vZ6xto2NpYuHt7GZuagL/p4uIkJydDT0ejJC8RHuJdmJdSU57f2HD8
+oVTT+5cbL1yJiU2VENZfu8u6jXkIdsbbFQk0jyt2ej3a/BwFHs5qosKwp/4
ECt9eXluZ8eTro7n3Z0vO9sfAV2XZEemBDvb6cmZGyoz7t8pzMHq5+pAvXUN
I+Ne3iOHeNnoY0I8G2tPXGuqrS7LOFWaXVmUXJ4VVZUXU54bl5MccuJoUkZM
QGyU970Ht+eW5ymNMIuLi/PLS8Db/63+4FZ03P+Fb8P2689v1GgADE/Y0q/f
YBjb8D3YllcbeHFqEht2KomeL4RenEb/OxKIU42oMHWc7E6Ojw2h7TtHySGU
cVSPjTLpo4MI0oPfe/q/dvf2tPd2Pf/27um3d48HPz4f7X419vElOI8jn1+N
fX09+RUcyZegt0e7X4x0PyO9u4fg/dcANBz6QwhvRzJbUUkqMSn2/LnG6lOn
m1tab959cPnqleNV5SUniguKjlZUFpeUZFVXF19orq+vr8zPT0tJicjMTggO
9TIx07Sy0U/OjAVIOLi4RsYmuLp5RMVEBgYHuXl5O7q6CAqyH6Dfq6Agxs3L
ZGyi4+TkYGBk6OnlZ2Bi6uzhYmCqr6KprGesr6qpIS0rw8B4CAiZh49bTVsV
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
MvLy8xnqGxgZ6quqq2jqacCq4RPg3bAeRf02bdoEa4eBgUFaWlpAgG83zS7q
ndsExQS4uVmkJfiNTdXVFET8XG3AeUxNDg8N9YxPCofzlKQw4PDk5EhQJvn5
aUfzM4NCvZxcTRJSgnNyE/X0lNQ1ZbS1FQ8e2GdmqFtVXhAd6ZudEV9VWnC2
oqg0O778WPrpk0W1Jwvrz5RdOFfVcuXcjauNl5pqT1WVgdPqZGNgoqtqZaqv
oiAL+mob9QYZeQllJVk7a5OQYL/wqODM7IRTJ0vrqo831tVebDjTWHeyqjQP
dAV4grBwsmJDs8IDo3zds2JDLtZVlOWnHs1MuHCxqan5XFKMX4CHdUKwV2Ve
Ss3xHJBAr9+++AZe1dTQ7AIqxsORtzlinPvC4szS70U8tQ/Vrf33E0ESRbPR
QGFM4L9//6ZgG2kMxNUrRH5nBS+EVWfzP4xzCm8T43fIqwZDGqc1ibTOMjbU
cTY7iTt5UX/6yAA4j1++vOvpaf/4vq3nfdvHjmcfXj/+0Pbw3fPb7x63fnh+
51Pbva5Hl97frO+50/Dt0YXvj5sHnl0eIoaHIFS/uNr39BJY7zO0f83wy2ug
sdHIkdctcDLchhp+R9+iZgSMcDjevHvv9Nkz5Ser4hPjtDXkd1Ov27B+zdYt
G6SlRD1c7bw8XRKS4nPzjx4vL05OySivqoSb6+vrGxsbwUP09POyd3TQM9Cm
pd0LBMXFw8nCchjwLCTMzcHJQrefZjvVZh1tNdDYzIcZZCQkDzMdAtdMRlFK
TUPVxs5WQ0dbXVfbws5KW1eDmwsFoonK0o2bt246zMK0bdv2PXtphMV4OdiY
REVFNbW1dHS01NVU9PW0uDjZNm5YC/4jrAaAN7icDIwH2TmPHOFg30d7YNO2
rXB9+84tQiKcdlb6ViYajvYGgb6OXl5OocHu6RlRx8sK6+prz4LbVpIVEekd
EeblH+ARGOwRExMEroGbq+OZM5UnyvIKC1LLSrKO5ab6udtHB3lGB7o6Welm
JIWUlKZnZUTXniy6eP4UoLSoMLf42FFQ19lpCT6eLiDyVRRhQQvBMwv+OuAK
KCnK2NqYg4Z3cbYD2X80K7GkMOtsXWV9ffXl5oYrFxoqSgtqqgtL8lNSwv3y
02JPluaeLi3ITwqP8LX2cTDyd7eprSp+cu/B3dYrV5vPNjfWNjbU3L9383v/
Z6RjR76Bd0bZFWjlFyrnw324cws/fpHnmwFW0WiRVT/xN9q3d2UejjhyQmQk
V37+t/Lr36Xff5bgZkzdf6V1/peyxHOlKLXclJIqrOdRxnNlCctv3D4J8AZB
0tv3eWDg8/cv3Z8/dnzued3z/uXH9uc9b5C0/vrm2ac3D7+8utXz7MqnJ5d7
X7R8R9lGtDfB0IsrQ88RJwNuh1/d6H+OUjbDr1v7XqGplcR2TsT2TC/Q/Bw0
nIHI3QDC4fx6S+uly9evt94tKz/u6mIvIS60YxuqG92/dyc/D7uhgXZgoH9K
WnJWVkZpRUlFzYmCwmMnq0+fb7p0oqIqOT0tNDIqKCTY3t5eU1tDWFQIKHcN
sV8R1fbN+2n3yslKCvJxSooJHmFmZGdh3bh+A8Ae9AmIbVNTY/iInoFuYGhI
WFSkqbUlPLUJEbJ5z36aPfR7FFSUQcMI8HPvo0XPArR/roy0qLAICG8vLy9X
V1dNLb29e2nXr1u7ayc19Y6twPOgxukPHd5Px8DFJwgKhpud9cDBfQwHdhzc
t1lbRy42IbSoNKfyZClqwKktKS/LzkiLTEpGBa72DtZCQgI6uhpNFxpu375c
WVkAkC46lubuamlmpC7Cx7yPep2xrqKro2lWRgysiLTkqOMlRy9erDt3rrao
ICcvJ73yeImzk62mqpK2hrKGuhIszN179tLupwdfAB5YoMHMLYxc3ez8AlwT
EsJyc9NO15RXlxeVFh2tqSmtP33i1P/H1ndANXn2b7sHLobsvffee4YwAgRC
EvYKEMgCElYgjLD33kMQ96xbq61dttraPd63S622tlprXSCCaL/f/dwh5f+e
z/McThpDiOW6r+e6fnOib2aka3qoY6K/baynebS7qYiVkBkfUpSX2FAhGGir
nhjshHP0wbvn33333EcfXf7s82sY2MROEzQgFG9wQ+OzFp6CzMbLODC2//lH
NglKDmx8vSQqSpaWFok29gXiFMARWHgle7yER0jhBwSwF+WlJriwCpcO4oIT
zNvyukG5/AYjCW4RVUYRwxaI69f7v928/f03P371yc/ffPLTl58AsG9cf/vW
p5dvfHLp1rVztz89j0ziddQRg1rArp8F1XH3i4u/fXHx7lcgqi/9/tVbcAHI
cQoStYx9Ils9hr6LiGy/+c47py9c2rXnwJtvv9s/2EdPijezNNJQV1ZV3Lpz
q0Kwn3dWWnJ1lVgkErV0gnFsbu/oOnD4jb0HjwwMDfb290ikVWlpafv27UtN
T7Gysba1tVZVVdm8eQuuNfLx8TIzNdywepWbo104KXTLZrTVBSwV2CvAdjwt
xtPDJSMrXVIrLRSXC4sLkpNRfJuexLBzcbB3saPGRsLRsLa10dUzAKu4bj0K
X2/ZsT2UEgEKn8ZMCAoKAHmjraWmpanu5OKsY6CvpqNFCg3zCyJt3aa0atW6
des3unq5pbFSBYXc/LxsoTAvNzshK51aXJjd0lQxMdnd0VWfkcEIJfvHxkdm
ZCZzeeyysgKUsglyY2UwjQ3U9XQUczIZ9NjQaklhf38rOhR7JvcfmNq1e2jP
oamTZ461t9dLxMWVkjJKTFgUhRwS7GdgqLNlm4KqppaiksqadWvXrl29U1XR
zt4qNo4SRQ1PTIrPzU3jsDPa6moG+1rHxrqA/AHPg+3Swc66VmmpmJuWHU/O
oAWX81JqSvKlZfx9E/3HD0wd2jd66NDkpbfO/OeHL+/8egNnsVEsglgtIV+e
gia9PH+MV07PEiXWL5fm/yH6DnDHOhrIgECOxAnGNqCRENgvsBTBDzCG4ZXL
87QRsDGHw1thNbKIxsvPy+dNYd7GX+Xp+IdEVh1VBuLJDI//fvjwwb0/fgWN
fffn725//8WNrz787upbP1975+dP3vr54wvA2L98chYkB9Ay3v+IsuefXvrt
8zfBMxIbOi6i8uyv30bXV0S47/M3gaX//OoSXsaE9vRdP3P9228+/PyzE2cv
zBw4vO/IkYJykYevm6aGir6WmraaioaKYlhwACcfeKa6rKyks7Ozp7f/5Pnz
4DelDVWtrdKiQl5+Pru1rdHIyMDb1yeEFKClrebp6amrrYNiuGtW6epq21lZ
+nt7MBlxoJ/xQEj4ZevqaBnpa+nrqDPoVHYeK5gUxGKx2OyctIxkUXlxdY00
LS3F08vF08sVFZGychiMBLCTOxS3gFABbK/ZsBFspn+AN5MRG0lGyXUzMzMj
M1MdA8P1W7bY2TvCtyQnp/I4fBBLQeRAS1MjVUUFdUUFQy1ld0dTVydbaZ1k
YKAlh8Xk5KaKJUUVtaXk0EA7W8vklPjE5GhHW5OMVIa/j2tGRsLExMDQUAdQ
69hE7zgo7dGuicnBmX27JmcmJqdH+/raystRqCefkxMVHW5krLdh4xpcRqig
oKCtrWlkYmhlbQb22dHJFqjb28fdydFGS307Kci7tVEy3N8yMdJ5aHoU0Nvb
XgPGMDchCoDNTYsW5if1t1bNjPZ0NklG+1oOzgwdPTr9xdcf//fHb27/dgPu
7wBsVG409/ez56gLBq8YwM0vaDPm4z/hwavXL/CAX8A2XK+XWRfwibGNhjMQ
HIsFCUY1PIPXfOAn8dclgP2SbFraEtGqQLxYVkyFgb2imBAFT4ipUGj2Dnw2
NLXy+ZPZ2aePHj28/+fd325//9uNb25+9+l/r78NGvvmp+//+Mml/3507ser
5366cubmhyd/+ujkzWuIrsEwAo2j7XvXT9+6fgrTMlp7SiRoHnx56QGq0L70
8Lu30YMvLtz7HLB9+v1rH7175cPTZ84dP/HG9N497d09Aj7X2sJYXXmrtpYq
UKu9HVBNFCjwykpxa2tzd2/P/sOHJnZP9nS3lZcU5udk9/Z0RUaQvLzdgNVT
U5I0NdQcHe3hu2ytTMFRwr14p7Kql6d7CMk/LDIEYI+xDbJERXm7ro46iB9S
iL+9naWrox0jnp6UlJCalcIR8GuljUlJKRQKpa6+saiwpFBQJCwsYuVkWdlb
r9+4bjUxnhIkvbeXW1Cgb1hYaECAHzWWRg6jMJJS8/LyYqnRsbExoI5A2AcG
+Hh6gjixVlZWWLNqtZOjW//w2NBEH5Ua6uVoAYRcWSWMiAry9XFPYNIqKksq
KkUgMKrEpTXV4iNH9ohE3IIC0D7JHa21PZ0NtVJRX3/79O6JgcHu7u7mnp6W
crEoMZkBtyc7OxsdHS09PT19uMfooXR8SHBgWEQ4nRnH5rDy8lmZGcm0GAoc
Rnp8TFZWQntDxWhP856Jgb2Tg2AVK0SsSmFmQym/WpjbUM5prCyQigXNVaIm
cWGTRNjRVHHy5IGvv/scPCPc3HFS7+/HD1BTANEXAEp7eSC/bN0VcDgA+yUY
SaId9TVSGosYqISXlGkSQCZwLLC3vK6VqGiVFUqBMkH4JzqnMLBR3ocANh5Q
TGD7FQ59L9fHvpKPvlzRzkAMgph/ilT33V9u/PjVzR+/uPHDl7e+//LOT1/9
/PW1H65d/vb9c//58OxPH539+cOzN66e+uX6xV8/vXjn07M3keS48DuxblI2
rw9t2UMCG578gxjHCnT959cX//zyPFyA7Zn9IEIuX3r7rc+++Pz0+QsHDx05
ePAg8LCBrpqS0mZ7BysLS5PwCBJfkC8qKSwuKWxoqNsFfyYA2O1CAXegp1tS
Uenj6ZTHzmpqagCG9Pb0g+NgYKidzKCC4FRS2oFKOpWV/QO8KFGkUFIAyOxV
xCJaKysLfX1dtEl83SrFHaiEycHOnpWZnZ+fH59Ir6mvGx0fA2znsnlcngDU
eHJqCpvLYabQI6NJfr7eqwhsb9u2LS4urqREVFwslEgkJaJSWmy8mamxyo6t
OtrqWjrq4ED9/PzIlLCd6oquXi77Dx/55Ppn/f291jYmcDpMDHQZtGgHWwtD
A+3snNTevjY2Ozki0rdQmNPc1CCpLKOQAyPJPukJ0VRKYGlxXm9XY2endGx8
cHC4r6+/s1JSHEEhR8REWtraqOlouLu7koMDvL097R3tyKFBEaHBiQnxoIL4
BZyausrunjawmVUVJQWC/Na2upGRroO7h/eM9aJK1K7G1qqiamFWo4Tb01Dc
USusKsoBEVIl4lQW5ZULspuqRT0d0nfeOX/z9o+//X4b5/UAwI+f/fX3kz/x
zk28qhvPIJp7/vfiq+foIpqbQJkAhyO3iHTFwrIU+UcmLXD9KrE+bxnbr2Rl
JssXEtvE9HjM80uvZJRO2MwlDGw8r1VWW7WctSTi4Us43kiYyqdgbO/9cQcX
Pt26+cO9+7/d//3Wjf98CsD+7p1TgOpbn7wJmuS3z94m9h1cBlH9G+p5RDGQ
X784//vK2cIEyDHU7xJBP9nAnK/P7zlw+J0Prlz5+MOzb148fubMvgP7d++Z
6ehqT0ygGeuraahsU9q+WU9XU1hU0NzalJ6Z0tzcODw40ljfsG/vdFm5SFpX
VV1VKeDmFhZwslmZUZHUlqbWMnGpQMCjRoW5udk5OduuRYm4NQA24HBvL1fg
T0A7KHAgdg93V2Mjg00bNqLy6bUgSFdrqakDn0VGhgeH+tIYMZToyOwsFiOB
xkim05nxwcEklNaMILW0tPAE/Lh4GshyOp3u7e0NbAnPR4STLMyN7ewtU1KZ
pSWF0ZGhcNfAscTsHPaN23cOHT4aG0vavAHdN3JzBQND/d4+LvAY7jV8QZ6v
v4upqaaXl8PuvZNd3W1hpABXRwsBO7W6jC8RF7a0VPf2o0b44ZGeSklpQirD
3MZMWV3F09fHzskxOCxIwM9LTaJnZKZEx0bQaJHs7FRBQT5a8yQp62hv7uvt
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
y3Js5JV8DzUqF1mG6ApUv1om7aXlnA6uCVyQxVuIQ4Qn9qysnvofbMsqvZde
g+5feCXbZYaVCe5fkI2HXXg+t/gcbQSefYrKvB/+/sedn2/+5/qNL67c/Py9
X75875dvr9z7+Uu08PeLt0CW/PjBSfT1yht7Dx6Y2jUxOjJw8NiBYydPgG18
/+oHg0M9DDqVQg4RcFA4omtoNDic7OrupKGl7uPjk5GWWVEibqxvaGpqKCjg
DwwMvPvhtebOTtAb6SlM8FPR1EgBP48aSxOVlQMxioSCGmltOiuLQolQVtoR
Q42MjAhbv349nmPj6GDDykrlcHO4nNy42Kj0tKTsnIymlkZhsUhDQ0tbU4sS
HUWlxzIS6JXiir6+nrz8bFU1JQc7e/izecNqQ10tNSWNdGbWhXPnS8XCmLhw
UBGghEGegyrO5wiaWppZOVnrN6zeunWdvZ1Nsag8LSN949YNRib6YDZRO09I
yNjYWHRMeHWtKCjYF25VGhoa69eu27x5s5aWhpu7I2h7+IkurvYGBhr6WjtN
THUtTXU87c2iAjyY0eRSEa+pqRoE9thwz8zM2Nj44IGD07tnxiYm+kaHOqcn
+g/sGTl6cGr/zOjMeH8Jj5WdFAu6Oj4iIIESkEkLLcyi89JiEar5qXXF+b0N
kuHexl1D7VPDHVODHYd3j7198TTYxgcP783Oo0AHymITE93xeFsik/4MWUIC
Tlg84KFzL17OrljC+3J5qfpLWRUrejyPdTWa8vfy5cqpIxjJcmRi7pU/L8fq
yvkk8vA4qkJ5tSi/8LFakZeXxwllOR24qcjakF8gyQ0wRnn5BbRnBMXGX+AF
wc/waDU0dfDh/Ud/33/45917v976487NP+/e/uvXH29+9d6P186ADrl99RxY
S+DtC2+9MzMzPdTfNTE+uv/wobPnz5w4+8aFS2ektZXGOmr+7i7cfEFzR0+h
uDQolKStq0UKDQwJ8BUK+AP9vfAt1dXVw8PDcDqEZSIQKmWlQhojJo4WxaQz
EhKTeYVoBxY9LiojLV0ikSQlJbi5udg72lhYmoAUAeSYmpra2Fg5OduCfGXl
pmdkoWghQLempkokKgLqZudmhUWGxCZQi0oL+/t6aqol3T1tQOyszGzQ/9SY
SBottrNn8NipczW1lRERQaDtS0uLC4u44oriXbsmDh461tbRHBYebGVttmmT
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
bdLx3pZ9E/1A18cO7Tp36tDVK5e+//7T3+785969n+/fvwFf7927+eDB7ceP
8bagR/MLs1hFYEZdeL24+M9LZLjwRnVZyTS2kP9qjBWKQqYuQNNifbtyeQ2g
SK5Dlov3FuWvwVwtqwlcmpfNKCZOhGxh2b9lrhjVi3KU4kkOc8vr2uVMjn3l
isEm88QqqMegwfBaKNlI5MUXgPOnTx+D5Caue3iW4MO//nj86M/Hjx5M75kY
HR8ZmxifnNrV3t46NNw3NTUJKJ0YH949MwksmkdUY2pq7NTWUo2khMI92lBb
29neobCwkCfgZudmSutrQWx3tLWXEAuJ2tqbQK+ikEh5ia6+VkCgD6gOUObl
5eUJCUnwVcDjW1mae3u5glAxNTcBRiWRggOC/OMT6SAYGHRaDis7n8uprq8C
Rwl2EoR0bGxMZWUl2LocdnaAv++GVasSmQnMxARdHQ0PB7uk+Pg8dk5uRkZ0
eFRnb9/o+FgUJaK+RtLcVFclqYB/C4+fx0yIqywrrpGUdbe3MJn0VavWhIdH
UqNj1NXV6+pqdXS0ysTlVdViQ0NNwLaZqaG5hZGdo4Wdg7Grs1mQv4eOrsba
9WvWrl27acNGBQUFRaXNHq42Hs62IEsMDfX9vb2c7c0crE0jgn3NDLXVlLYY
6+wM9XGKD/MJ9XGIJ/mx6BHh3k4A7+gQD1q4L6Daw8owyts2LTaMk0ovyEnu
bBaDdRjqqJsc6tg33nds7yT4zcP7xwHYH1+99P1/rt6++cXtW1/fQfC++ejJ
72jrxPPHODYia7PFXoxANbDusxezaBPNK1nhNAHsl/8D75VTzuRF1BjqGFRY
A8g2n65QI5gw8bvJgA0MDycIvCpR/vf8OSL55eFUC7gsarlZch7DUr72Gj/A
q65xUl7G1YvoI+HZU88XnsqXL6Ab0CIaJ4s2rqKI0BNCoT3D74YP4+Onj/bM
THb3duya2v325XfPnD1/4cLFA4cOtrQ1g7SYmh5rbqkrLin08nRH4zLWr3G2
t4kgBUVHkENCSXkCXkxsNMiGhsZa4HY+n9ve2Tazd3dff1d2dlZRSXFza0tw
iH8IyT+UHIiCb6FBBQJOWhojOizM0dYmIpxEi4+2MjM20ddJpMcVFgpqa6s5
Bflwj3BzdfZydQrwdPb0cA4MDMzJzuLxOBwg5cx0YGkHJ8c8DpuRQFuzehUx
cWQ1aAk7G9uYWOrA0KCAw01ISABFVC4WFQr545MTZeUVgYH+PG4uvEkhL7+t
tZGRQE9IYnZ2tsM/Ct7fz8/PzMxEWCyKjgpjMmMSEuPDw0Kcnez0jbQ1tbcD
sI0NVR0czOzszZWUt65bsxYOxbZtW4yMtNycLH2crbZtWqemrORkb+XuYBHs
45bMoHq62ClvXqOjuC7Q2Sw5lsQID2AxokBaG2sqGqmr+LvaUAJcshmRybHk
DCY1lRbBjApmZ9Ibq4QddaWdzWV9rbV7xwcO75/cPwOkPf3Be2e//e7qb799
j1gapR2RwEbpuZeL8hDx8sSPRYwcNJFsYY7gxufLqJYr5Bcr65cQYhfmV7Yu
ytGO9y5hP4j5GUf/cJBw5TvjJRdYL8OFjZ4s+0McNzn9YqqHs7a8NXUO9/9i
TMrrAHEDDrbGROXAE5RmWnyBXyYf4IPEP2J+WRE4of7hRvUcr6qsFpc2Sqv3
Tk/19fUNDY8eOnTk6NHD0zOT7Z0tjS3SXVOjJcWFUZSwDevXmhkZerkhyMVF
R+qbGIRGkn39PGnUSFZWWk5uZk1NFRB+R0ebpKqclZNRVSPhCwpZrExqLCU2
LiojPQmgksdmOTlZhXj7UCnhjg52YAbDSH7aO7e72Nv4eXmC/M7MSgnycjfW
0wZO1lZRApAzaXEBfv7a6jsVt2y0NjdRV1UrKBQKi4s0NVRUdmwHVKMWzVWr
9PQMBkZG4Xk7Cwsba0v4SGHhweLK0vLyUjotXlorkdZWMhlxKYnxwOHs/Lz9
h2aKhLyU5EQOLx+NIAsnx9Ko6mrKoOoTk+jJCbERocHuHk52diagOkyNNB3t
jX297RwdTfX1NHETARC4k71FiJeDk6WBuvJ2eytzenRoWKAnheSbmRQfFx4E
zltPeV24r2NKXHg6nVLCzcxJirczNjTVUQ/xcYyL8OWwEssK82rLBPBXwvwM
QU6KtIzb1y4GQbJrqP3QvonTb+w/cnDqvfcv/vnwd1SYOv8UU6isH3zpFUBq
fvm3TAB1AU0Ann+K1S9mOYzVFaE2YpnpP/8qbaLobh5lbQhkYgLHY4Tx92IM
y/UMxvMiITxwxEOe+sFH7OkLhF6UIVpako8ogT9YYBOuE02sIkgbd5AhuOID
hXs25d1AaGuGrDTxOSZ5wlouyHvQ5BGe5XcG4Y17ip/nsTJ6e7qmd4/v3TPV
293T0FxbJ5X09XfO7J1q7WiU1lXV11UXFnA8PJ2Bt1V3KhroazvYWALfZrPS
fTxdfL1cQ4ID8/Jy+/t76+ulGRlpzARaeUVJmbg0MioiKzudnZ8tFAlAnFhZ
m2WkpzLoVNC0lDAyKIrEhHgnRxs1le1bN66D8+Lj4QoI11NVU1NUdnFC3btB
gf6KxOB3hXXrdihsXL16FZUazeXzVFSUTAx0nZ0cGMzYSArZ1ta2orrG08sH
XhlCCvB0c1TcsaWoUJCZmuTqZEshB/p6Oaen0FOTaCnM2HhqDByMjs6WpMT4
8+fP9vb3REaF5eVnW1lZKG7foa2p5e/nxYyPTE2Ip0aFwmVnaxEAUsPdwcPN
0t3Vws7GwEBXYw0xNkRdbaeTnSmF5O3tZG2otTMmIiQrOdbORIsS6C3iZfNy
k+LCfGIC3bITabwsRrkgq1lSmpeepLNTSVdjp6+XY3xkUBw5MDeVIS5kt9eJ
O+orGiRFLdXFnY0Vu0e7QGMDqk8e3/fxJ+/fe3j/8dwTtEL3+Rzhs4igBCFQ
UYMAEcEjtARabPdiAWgWhSbmXjxZWo6wrdAer9G44H+QFMfzVDGLyhI3izJd
DagG7C3PGZ7HFI1DKzg8jgtc/ycdufj6FQpEL/zbLymLVIPCeYmrW1/iPl8c
MCFO6ByuJyRKpGZRwEcW4XmEgzy40EV+U1heO/JcvqlBDu/lsKRsrmZKfGxq
Kq1UIhwdG9wzM3369MnurlYeP6eru627px3ot7RMmMtOT0tPhN/v5k3rtDRV
/f08/Xw9jA20bS3NXF0cAH6VFeVwZy8pEQFWAbpA4HRmfFpGMogBEjlIKCwE
0gZ7iMIaMRECgSA3m91Y3xAaGgLm0N/f19zMyMrS1MrUSENZ2c7OgUwOB3mw
fTtaRrB580bVncrbN20ClgQfmp6dYWVvmZaWwmbnwEFwcLKNjKIcPXwkJiZq
FTFLB4/QiYqKYjITUZ5xwxodbVAK2+CtLE0M/LzdTAz0s7NYIcH+2ay0nt6O
4tKiwaEeMKH0eKqpiRH4SuBtczPDCJJ/bFRQWLAveMOY6HCwkG4uFh5wOZkF
ezvACzYRfZ1G+hqptPBAdzsrI31zA430BGpSbIStsVaYv1upMFeQl8KMCGKE
BxZz0gCxNaUF0gqhVFIKRw8+FZMaxk5jMqPDE+Mo7DR6Z0PlcE/TaE8rgBzU
yEhv8+7JvvFh1JL2043vHz15jCfSENmKebRI98Xssn6Q3eWxVZTHNPC1EtUy
IfEaXWAV8bfIvaF8QggeKiWTHy+XgxLE5hq8gGm5z/Hfjht5eeoLWaTuFaHt
8bi/F8sgX1zeDyLfFfLvtHkcnwdgLy/teoYdhFy9o+IB4qfPE/4R/9NkomUB
Ja1w9FJeGQ6CEO7+qfS4ulrpvv2Hh4YGgM06u1oA2OKK4vqGalAX8JXPy8vJ
SnVxtt++bbOVtamGrpqG9k5vH3cAJzs3M4+dBThJz0hKSKRRo8J8fTzA2QHU
s7Iy3NzcsrKyaPExgGo7W8sEZlxnZ2dDQ1NFRV1H98Cpc2eTUxP09HRMTU2j
qTHh4eF2dnYKCptQLdO6tcrKih7uzhbmxsCQCps3FnA58M7A/CAYyotFQLkx
FNrBA28kJiOdAwLewsIMvlFfXz8vL09ZWRm1zBN1UZvXr1PZtm0NagVeFUYm
gVZXVdqenpbo5emSnMIYGoQ7VbuwgBNJDgEt5OPrgTqOt20K9neJjgikUoKD
A9yDgtzCyd42ptqu1kZ+HjZ+7vYATpBnRrqaZD/XFFpERKDX1tWrXB2sykSc
AA9bwHZpAbtFKi7MS+Vm0sv42SW8nLpKUU+rdHKoa2bXYHhIwLatm9xdbDMS
acmxMZFB3kWcjMoyXkdLzYE9aObk9EhnR0OZuCCnkJd54c2TT2efzM+j7Dna
L/Ds6ZP5ObSodAFJE6IKFMkJ2W+ZsIGyqO9yRwyu61jOoS/gWNkC9p4EUct3
QWIRgvGG4SQPhqNnXj0nEI57Z2TFJLL6KGIID65txbcPQrTIGydlwMYhFGIm
yTPsClGhC9Hdhr0DCq3AN6IK2+dyQl4WLbMrKVqurmXYBmC/IvTPS3S4uAIW
0G8kOayhvqZcXCwsLGpsbOzsaBMW8UFdd3a1jo4PVVUDjgSZGSmODjbw69is
sH7NulV6BtqBQb5JyYzUVDqTEQvyNSTA18fbMy4uLigkGCCdw8728/NJTk7m
5HFjqdFenq6kkCBQv6nJKdnZuQPD0zP7jjY3N9IYMeraWu7eXl7ebsCWKBC3
Zi3c5VV27rA0NQKJYm1lZmJmiKR7ego/P1daVcHJyaosK+bz+bsmZw7uP9TR
3iqRVPD4efmcbFAOMbR4XX2UN0QxujWrFHcoaKhsU1VUAG0MwE5JSYGPERwU
YGVjCfaTFBhQXFKQnEQv4OZx2dkVpSL4EcH+PkrbFLTV1dydbLxdrKjRQSkp
caQgT2317ZZGWtZGuuEBnoFeDs72ZjbmJtpqin5e9gnRJFcrM0sDzbRkSnoy
NZrsn86kFHLS6qXCiuK8AnZKMTdLIuK0SSuaqorh6u+U5mYmwz/OzFiHHOIv
EuQ1VJUU83MK81l97Y1nj+8/fXjPeG9LXXlBe0PFqdNHfrl7E4j0yfOnf88+
fvx8FmBB/FJf4LAeIUgW5ZsIkEhYWpTHN+TRYKyTibqpWcy6cnhgtkfimRg5
QlxoxxCq+nslu/AtACdi0Kl5vUjU8/1buYo7a1D2k4hAYqLGfe44JL5sb+fQ
Qsm5R/hCzT6o0AUPc1hAu/yIglv5eoX/m6B/hclflgAibiigqXAQfomoHsel
s4WFgvx8dkW5OCo8NILs19JSPb1nrKS8KC09SVpbDWivqCwVV5QAY2dmJQUE
ets7WW/avE5RaautnSU5LJhECs7ITGluQVEIQFpSWrqLl1dqZkZxsZBCiQ4K
CExJSi4qKIRbf2REaEw0hUQiebr7SCQSVDdIp2dnpMZER9jaWltamGipqYAY
8Pb0sjIzNdXVDvL1TIiNpMeGsVjJINp7errKRIX8vOy2xjpJpVhYLDp37gKI
n4z0ZFAUdfXV4F7T09N3TUyJxWItHc2161ZpqKtqaKitX7dGaetmbQ0VPU21
rVs2M5ISIyPDXR0d0BDXVat9fb2LhHw/X09aDKWIz4HPw2ZliAp40ZGhGzes
Xrd2FXyjn5djYlwEaHXQJ+7OVsY6yl5O5pGBriCS3Z0d4LCA/01hRICccLI2
dnMy57JTQGDTwv1ZydTaCkFVKS8vgy7KTwdgt9SUN1WWAMhry/m9bXVjQ+2J
jKjNG1bpa6kx4yjgJYVcVoWI29ZcOz4xdPz4/qMHp/ZOD19888ynX3/+673b
j2b/fvz86bOFuecv5+YWZ7ELQ8HnpRePZh+DPplblAlgmb97+XyFz8L39Dls
FZfN2ot/owpEemUZ1ejCJSj43VbGwDHOcYxaXqr6D0oULuJ2XRlEcYT85QLm
ZxwDwUyO16Ti2q15whcQBYeLC0tzsgKY5aNBtPa8WllhgoM2MuomTAEcsRf/
oFUj2Cng2VZg4kBDhoUE5mWzeNxccWVhUVF+V2cLSOsEJg1IrKiQB+4P+JDP
z6HEhPkFemlo7lTZsdXe2sLbyw2sIiA/lhYNJi48MjQ8MoxCjYmlIZnt5xsU
EhICYpjNZjMY8aFk9J/h4ZFRUZE11RI4EV5eHkDy8FPA8dHjY2KpkeArY8Ij
A7y88jPThXwOODiSnxug+dgbR1vbOkaGhrvb2yrLSrn5nN6+ocHBQVA+fB67
va2pprYSTmh7e+ehg8f6u3vg08K7OdpaOTnamxrqbdu0Tmn7RsUtG0HVZLFZ
IHtWE/eFjes3hIaR/QO84TMwaNEhgT6kIN9ERiwrIzk5gebiiFrO4Yxoa6mS
g73CQ/yyUpnwQF9b2URXNcTLMZUWAYYRDouBtgY50JWTxRSw04GEkxOjJGIO
NcwXLpAiaKJ7UV4ROy05LjwnhdYkEU30tY50NUyPde0a65oc7Srk5xroaMLH
MzXQsjTVIZM8+RxWTXXF3n1T739w6fLlc+9cfvOjax9+98P3v92/+9eTh89e
PJ1bAikySwSrEbYB0rd//wVgj6PWuFwfK1J8Z5ctwkPTn+ZWagNEj/IlYsTr
iQKqWVlZIEHgiDxfPseRFlnCBZdqo2UIL1e2usOPJo6bDNX4By2j+hl+QMR2
iIQLMeQH78BdIvI7gPYnsw9m5/9GhQEyPMvrAJfkzZXLjgAdEJBh+JDizBSu
kv2HCM6UigRBfq5ujrZcTl5paTGQcBQ5vIjPk9ZJaHFRackMeEFKMgOENKho
oHEnZzsNdRXlbZvB2vv7uCckUFnZ6dS42DgGPSc3Q1pXUVDIJcNBCSPn83nF
paLk1KRcdr5AUBgYGAj06O/vHx0ZEhrkD+8RGODn5GjLzstCHpMUHEkJKSsX
Bvp4+nu5VVWUTIwM5mRnpCcxuJzczu6O7FwW8HN9vTSHld3R1t7b0yWtqwKl
xOdxqiTlTY21ouKC8fHRo8ePFAsEWaxU1M/SXAffnhhPNdJVV1PaorxDITUl
IYISjsIsmzYDXVtZWYHX3bhpbWQEKSqCRA7xTaBHFwjyc3MyoijkJHpsRCRp
u+KW9RvXWVma+Po6k8neft5Ofl7uBtrqpnoaUcFewZ4OPp4u2xU2qiisjQvz
S42PdLA2DQvx5uWl5GcyKCGezGgSPCjITe9prgWxIeJnirhpgOqju8f3zwzt
2z24d3rw/InDM5OjcKeAt9LT1YDbVZCvu6+rE5NGrakWnz/zxrUP33333Quf
fv7Zr3fv/PXo3l9PHjyeezK7MIcndQBDovbYpw8BlijwO4viCSg8+AJ9xaEz
DGwsJHA/gGx807LtwhKaCLU9lU0/I7LkWOsSsmQe99QQUCe6zF7JZy+8xOS/
nOhckJeIwMte4KYYosqFEB64Z022JhVX28KDJ0//fPT0AcB+OTIpq26VjzKW
X5j2caMN8YOwYVxYOfQY3HREODmeGgXeX0lxS3CQX3mZKDcjKyeHhYLAYlFs
dDjYHPgVZ6YksHOzEhPio6PCrc1NjPV1gvy9wPs4OVklJjKrpLWistIaaTXI
Ev9Av+T0tPRsNjyAy9rWisvl9/YMgovcsX2rs5ODj7uLssImJ1vL8NDAqPCw
nOws0L00Gq2urq6xsZ4cHJAQH1sqLKivqR4Y6KtAfbslJaWFRYXcuupKuHM0
N7XXS+tA1UsqS1FF4r49gPDBod72jubGptrqGnFPZ8vIaH9Xd2uRIF/AzU1L
jk9h0jxdHHds3UilRnt4eQKwQcOvX70KlDY1LgYkB5AzKg7xc8/OTAEjXFjA
TU9LymOzeLxseztLB3tbUOO+vq4+XnYBAW7Bfl5mRppu9uYBrvZwOVibb1iz
evPqVSbqShR/N3jGwlAThEhtmaAoPw2gnkwP52QmAKpHB9uG+5ubpaJWaenu
ke6Du4d3j/XMjPdPj/bunRycHOnr72lHdx9JCciSCFIgaG8gnKgQf3EJb8++
kQ+uXP7hx+/u/nHn0ZO/Hj76Ew2fJOga37sBxmiiyDO0r5BItT/E2Q2MHFyY
BKheJAaxgnSR50dwdILYSY0m2+AiWIJCUYoEB99we/trMIXEkxjbaO4lcSEl
8GpBNmOHGOaAS1DQtkQ0KgcBGCBNFLrIBp7AhQf74OZ6YhXd3/Ax5JD+n8nG
8pEOeC43HsQNYP43Tbkk88iysPnSS3J4aFFRkaS60j/ET1VNCcAmyM8BydrS
1pyemRZLpTjaWfp6uYImiY2jAGnnZqWDKgaEJybR9fU0fX08AOoJCQywbxwe
mxIbxS8S+gQEWltbq6ur79ixw9XVtbu7m8cTrFuHAnHAzEaGuib6Om5O9kGB
/onMhPTUjMjIKFDdrU2dPA4/IS4exDqYuLhYSoW4RFJeEksBgRNcxAMeTSkq
EE5P7ePmctqb6rmszLDggI6OhqmZ8d7+nl1TY7t2DdVKxFweu6unfXh4sLKi
tLqqvLJSVFku4uWx4V4TGxsD9tbGxsrF2R7UFIMeCzrE3sY0xN/T2syAQg5O
YsalJTGzWenCIl6dtKq8pDCZEZeUyIRPDmoh2MeNGh7o62nr62plZ6htoqlK
DvJhxIWbGerCMdHfqUgLD8hgRGns2GSgqVRezBWX5PPyUssKc8XCvJx0mqiA
1d1eMznc3lpbNthZNz3UOd7TNtrT2t9Rt2use/fkwME9U8cP7Tu0f2psdADO
5vTu8fpaMY+VUpifmZnJhHvQmxdOf/X1p3/c/w1FxuaeEclBWVQBmBxvx8DN
NYDz5+ivniC1/OI5Do9gBIKSIYAxi1GN5QEKIBOOEkeMAcmYTjGqsdhGtXmE
sCGiJbMrNYY8NUkoEBRFJxbh/YWhiwdEAHplqJ59NDf77652/Dwe17Pywihd
uTEEhzpxShSH2eUFVMtjYHE5LhItZeJiMI9oa9jRI/ncPJCstOiIslJhU3Nd
SbEQlB5wFwhpkMFe3q4iIR/MWklxYXZOOjksKDYuKsDfOy4uIj8vV1or4fJy
+UJgSWF0HN3Cwkxf39DXJ7Crq6e1rdHBwQGwAU8CkLS0Ve1sLTy9vUIjouLj
48NCybGxsV09neXlpZQwsp+nazQ5MDaa7OZu7+vlSAr0MDPU9nC1g8vN1QHI
mcmk52am5aQlcLIyODmZYC0lVWVl5SLwuSKhoK21ubW1GZzmiTeOnT93pqW1
vqWldnigs72tkSfIr66qpISG+vt5UWMj4XiWi4tRrCbIO4zk52hjER1OKuLl
w5lKT2HmslIaaip5bBaIMVpctLKy4laFLTrqO4M9nHzcrKyNNLUVFTQUt/l7
uSRQSUFe9oZ66rpqin6udtxMZkyor5WxdlS4X5kor6wkr7QgpwDsZHZisSCr
rrKou6V6cqC9r62moaJooL1hvK91uKfp8P7x44f27J0a3Ts53NfZPD7Su3t6
fP+B3adOHX7//YtX3rt4+sSRifGhsbGezk7p/oOTX3372Z9//fHs+aPHz/78
+wm6iQNIACqoGYFYwovgiosoiIQLDpUsj9SbIwTqPA5B4Pjwy9fzeDQrFg+E
dJnFo0hksuQ1mqgDb4jlN2JsIh+0HIKTbT5FpvXVc9xr/JRYCfr4yf2/H/1B
tNIjMBNIfog/rUyKLKHgHk5E/lsi/vqlfHWCvPaP8AIoLYXH8sjqAxcJjb20
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
/X795fAm42+i1mevD+z4/XA2xx9owMHvuJufsKfla5JbePORENiH92sOm7Li
XL6wxdnvh70dRMVRPxN6aR9/JGLvON6OKgFEx4ow5Uqkk168+gkVEOzDkzvb
+weAZ0A1aiT1CszDy57efr6geXZmoqqslMdrPn/5wsLpJX5rS1ZasrONpaeH
a01tOYsVk5bOnpidbO3u9AsKNtQ3sLEwDwzwy8pOy8xOA00Cu6CsvDIjJ//U
0rn7b7/XxOMGh/j4epO83Jwd7OzpDFZefiErIZZCdgny8fP2dra1MYd9YWKs
b25mRAsLyshII5O94xIZyalscH94XjOICAKJYvKKcjER4T4eHooKMnLyUiAq
UC9ggKiapvIxJSnpo8FBvm4uDk52VmAJYaUkMqkhQdyGWjhocjJT2AnxTvZ2
Bjqa2qqoJlZRSQH8JqgUqaPiEdRAoGhtjWM2Nsf9/DwiwkNystOZjBh6TDgj
PsbXxzPY38fM1Ai2D7gAbQ1lfx8ScHsiM5LNptMi/EHSpLMTMtNYYDDTWDEJ
caEeTtbx6AJjXG5yTCo9NIcVXZ7P5lYXdQnqejubuA3lhTlpZYXZgqbaovyM
jNSEouLszg5BXzu/r5Uz2Ms/dWr85vVLK+cWB3s6xkf6L10+u3rzyuqNK9ev
rdy8dfn+W3cA0sDSQN3/+ucH8PjS5WV4zb23bn/x5Sf/9eBrcJEbW8+xCIGF
UiE/be/sbQIYduCXv7+3v7/74oUw5yiaoIGCxr/+gsMayPf9LvRuoqrX/1My
etipTzSDTDiw6Y/fiIkev4u6UYkaWiL1grzh/4Ia/k14q/HVYXuTX3G8Di9s
+uBNorvAvwqj1vg6D9Eufm9rZxM2LH7/8CmwNLiJzb0NgqgRqveJaSUHRDHK
8vnLKzevzixN8pq4HYLO7p72k4sLS+fONvEastJS7a3Mzcz0fXzJRYX5I2OD
rV1t8YkMZxd7oGJDMH8a6vSYiGR2Qm1t9fD4VM/gaFF59cz80uLSQiwjytrG
zNbOIiGROT49l5aTRfZ2j44KA9K2d7AAXaGnpQ0ag0Ih2TtY+/v7M5isoFAq
IyFWQR4Usyw4QVl5OSUlJQC2spK8s52dhYmBopy4qpKcurKitLgYIurjx/W1
tdSUFGjB/sCcx420I6j+gV6eoX4UGtUvlR0PCpnNjKsoyGPHxQT7eIAyx9cV
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
3z58+O2zx/+B9fjhlw8ffvno8ZePn3z1bO27jW1kJw/lxwGeSSeqG8GlI4ch
bmJO9KsXuL0kynG/2hcuFEVB3Zbw/YXX2yDgKAp6hujG8/K3n8HEYXMHtIyB
dxh+RHyLU0WIeNH8ERRjR0z+gqi8/ekAPCBoEqDoTaLEC8F4mwhmHmwSKhv1
gUdlVOi6Gcra72ERQiRV4U2mxMX7klw9nRwDfTzi4yPq6quqy0uKy/JBJDc2
dxSXV9Fj46lhoc6ujpFRYRQfT6BcUB15WZlJzISa2or6horWNh6P1wT4MTDQ
U1NVdrC39nBz9/BwA67OzMzkNfETWMmTs3OcRn59Q2NIeJCJqbaXt6vjCVuQ
vioqSobGemQv1D0YVXfIyVF8ya5uTumpadG0KNgmEdSgpNho8IkxYf5+bq7y
4mISR8QU5GXlZGSBSzU1teEB/FALM3P0xkoLU9jJ8TGR0RHURGZ0f18nn9fU
0FBXV1vJZscN9nS0cDnpyYlFhbnhESGRUaGwl+FTNzdXYxN9VY1jKqqKYB5B
mUvJSErJSwKwEYaVgfVVxdGA1SNCAkfz+sRsTY0TaEH1ZfmToz09nbzpif6l
k+PTQ71DXe1cXn1+XmZmKpuVxPD0cIEtVpiXWlWR0y6o7e9o7u1oAbENomSw
iwf0O9zfAuK5t7NpbrwX1MX5M9Pz00NnT03NTPSfnOwH6V6Rn5GTnBAR6BNH
C6YFehVnJVcVpHPK80CZowvsq5dXry1fvLh4+szcG2+ugn/85ut/f/vtZ98/
+PSH7z5++MOnjx/++9mTb9aAwDeeILoDigO3SGQhEUJw4mYfFf9jkGPM46Ij
UQESTlDi+wu4BkkIaaL3zq+vtZb6BTW+/uPFL/DFPyEJgaIWWwfoR2zihBHI
BmBmDD+AJYpJEotQI3t4CyC076McE4rqIH5G+VNQUMQ8KbQrDwjC3yOqBTC2
iWvvOziAj9M3gX5esNhx9NhQanFR7tLy4qXVlXMry31Dw0Pj0+Pzi/SkRPCP
EVHhappK6ppqMjJyujpacJqXFuQ01VVkpjHRLhC0ZmVlkUguABKKtwctJDgs
OCAtNTmvqHj+9OnmFkFXV9e5c+eiYiJNjus7OlnY2poA/kE/uLg6AGcqyEhb
W1p5eriBACCRSOgelqERNTAokcFMT2aDF3NzsdNWUw72o7i7OMPf6ujpAqVr
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
      "], {{0, 170}, {243, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSize->{75.5703125, Automatic},
    ImageSizeRaw->{243, 170},
    PlotRange->{{0, 243}, {0, 170}}], ",", " ", 
   TemplateBox[{"\"domestic cat\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Species\"", ",", "\"Species:FelisCatus\""}], "]"}], 
     "\"Entity[\\\"Species\\\", \\\"Species:FelisCatus\\\"]\"", 
     "\"species specification\""},
    "Entity"]}], "]"}]], "Input",
 CellChangeTimes->{{3.934380961474251*^9, 3.934380961475348*^9}, {
  3.934381086501545*^9, 3.934381093595705*^9}, {3.934381132094973*^9, 
  3.934381195805697*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"23568f04-84c1-46b6-bc11-19d766b0d46d"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.934380962351823*^9, {3.934381089125443*^9, 3.9343810940362663`*^9}, {
   3.93438114631741*^9, 3.934381197457358*^9}},
 CellLabel->"Out[24]=",ExpressionUUID->"d152ac7f-b0fa-43e2-9182-e9a831eec2de"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Questions", "Section",
 CellChangeTimes->{{3.933044963725752*^9, 
  3.9330449795190353`*^9}},ExpressionUUID->"412ba78e-200d-42a7-a8a0-\
21db1e445122"],

Cell[TextData[{
 "Q1. Test whether ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["123", "321"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "9bbaee47-54b9-4de9-9533-a51a2bf4c146"],
 " is greater than ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["456", "123"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "4887b644-a07c-4ae6-96d8-55c967703479"],
 "."
}], "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, 3.933045639637404*^9, {
   3.934381238147378*^9, 
   3.934381251530307*^9}},ExpressionUUID->"884f091f-7369-499f-8995-\
ab333a48e82a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SuperscriptBox["123", "321"], ">", 
  SuperscriptBox["456", "123"]}]], "Input",
 CellChangeTimes->{{3.933044985463201*^9, 3.933044986750958*^9}, {
  3.934381260336775*^9, 3.934381266970557*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"f4a87653-b483-4198-afd5-3e90f0620ed1"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.933044988930332*^9, 3.934381268251528*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"81c45f91-3a0a-4903-9ddd-808853d9328a"]
}, Open  ]],

Cell["\<\
Q2. Get a list of numbers up to 100 whose digits add up to less than 5.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.933045056297317*^9}, 3.933045638646614*^9, 
   3.9343812794862747`*^9},ExpressionUUID->"e5039219-650d-45c3-90b2-\
144bb22f0edf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Range", "[", "100", "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Total", "[", 
      RowBox[{"IntegerDigits", "[", "#", "]"}], "]"}], "<", "5"}], "&"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.933045063288123*^9, 3.9330450677902946`*^9}, {
   3.934381288458312*^9, 3.934381318180472*^9}, 3.934381364701646*^9},
 CellLabel->"In[31]:=",ExpressionUUID->"b902cfcb-d50a-42b8-bddb-fbd2b60ac2ad"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "10", ",", "11", ",", "12", ",", 
   "13", ",", "20", ",", "21", ",", "22", ",", "30", ",", "31", ",", "40", 
   ",", "100"}], "}"}]], "Output",
 CellChangeTimes->{
  3.933045068531444*^9, {3.9343813001235437`*^9, 3.934381318757101*^9}, 
   3.934381365493017*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"23ac22a9-c9b8-4f48-aff7-e57acec8a858"]
}, Open  ]],

Cell["\<\
Q3. Make a list of the first 20 integers, with prime numbers styled red.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, 3.933045638006887*^9, 
   3.934381383217801*^9},ExpressionUUID->"8240b91a-e4f8-496e-ae27-\
af96e84ebb48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"PrimeQ", "[", "#", "]"}], ",", 
     RowBox[{"Style", "[", 
      RowBox[{"#", ",", "Red"}], "]"}], ",", "#"}], "]"}], "&"}], "/@", 
  RowBox[{"Range", "[", "20", "]"}]}]], "Input",
 CellChangeTimes->{{3.933045091218141*^9, 3.9330451188091393`*^9}, {
  3.9330451674076366`*^9, 3.933045169358844*^9}, {3.93438139410341*^9, 
  3.934381418459334*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"a91aa315-ba59-4fcd-892f-5978378882de"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   StyleBox["2",
    StripOnInput->False,
    LineColor->RGBColor[1, 0, 0],
    FrontFaceColor->RGBColor[1, 0, 0],
    BackFaceColor->RGBColor[1, 0, 0],
    GraphicsColor->RGBColor[1, 0, 0],
    FontColor->RGBColor[1, 0, 0]], ",", 
   StyleBox["3",
    StripOnInput->False,
    LineColor->RGBColor[1, 0, 0],
    FrontFaceColor->RGBColor[1, 0, 0],
    BackFaceColor->RGBColor[1, 0, 0],
    GraphicsColor->RGBColor[1, 0, 0],
    FontColor->RGBColor[1, 0, 0]], ",", "4", ",", 
   StyleBox["5",
    StripOnInput->False,
    LineColor->RGBColor[1, 0, 0],
    FrontFaceColor->RGBColor[1, 0, 0],
    BackFaceColor->RGBColor[1, 0, 0],
    GraphicsColor->RGBColor[1, 0, 0],
    FontColor->RGBColor[1, 0, 0]], ",", "6", ",", 
   StyleBox["7",
    StripOnInput->False,
    LineColor->RGBColor[1, 0, 0],
    FrontFaceColor->RGBColor[1, 0, 0],
    BackFaceColor->RGBColor[1, 0, 0],
    GraphicsColor->RGBColor[1, 0, 0],
    FontColor->RGBColor[1, 0, 0]], ",", "8", ",", "9", ",", "10", ",", 
   StyleBox["11",
    StripOnInput->False,
    LineColor->RGBColor[1, 0, 0],
    FrontFaceColor->RGBColor[1, 0, 0],
    BackFaceColor->RGBColor[1, 0, 0],
    GraphicsColor->RGBColor[1, 0, 0],
    FontColor->RGBColor[1, 0, 0]], ",", "12", ",", 
   StyleBox["13",
    StripOnInput->False,
    LineColor->RGBColor[1, 0, 0],
    FrontFaceColor->RGBColor[1, 0, 0],
    BackFaceColor->RGBColor[1, 0, 0],
    GraphicsColor->RGBColor[1, 0, 0],
    FontColor->RGBColor[1, 0, 0]], ",", "14", ",", "15", ",", "16", ",", 
   StyleBox["17",
    StripOnInput->False,
    LineColor->RGBColor[1, 0, 0],
    FrontFaceColor->RGBColor[1, 0, 0],
    BackFaceColor->RGBColor[1, 0, 0],
    GraphicsColor->RGBColor[1, 0, 0],
    FontColor->RGBColor[1, 0, 0]], ",", "18", ",", 
   StyleBox["19",
    StripOnInput->False,
    LineColor->RGBColor[1, 0, 0],
    FrontFaceColor->RGBColor[1, 0, 0],
    BackFaceColor->RGBColor[1, 0, 0],
    GraphicsColor->RGBColor[1, 0, 0],
    FontColor->RGBColor[1, 0, 0]], ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{3.93304511936385*^9, 3.933045169961187*^9, 
  3.934381419322308*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"30e18255-feba-4668-a2d5-edc316277fb3"]
}, Open  ]],

Cell["\<\
Q4. Find words in WordList[ ] that both begin and end with the letter \
\[OpenCurlyDoubleQuote]p\[CloseCurlyDoubleQuote].\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045185601613*^9, 3.933045192555925*^9}, 
   3.933045637337912*^9, 
   3.934381492976286*^9},ExpressionUUID->"5796bcd5-50b9-4774-91a1-\
592fbbb6b856"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"WordList", "[", "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTake", "[", 
      RowBox[{"#", ",", 
       RowBox[{"-", "1"}]}], "]"}], "==", 
     RowBox[{"StringTake", "[", 
      RowBox[{"#", ",", "1"}], "]"}], "==", "\"\<p\>\""}], "&"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.933045196880291*^9, 3.933045198105199*^9}, {
  3.9343814990658627`*^9, 3.9343815643519506`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"ee43f7f5-3928-4df4-abab-dbf7cd454b3c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"pap\"\>", ",", "\<\"paperclip\"\>", ",", "\<\"parsnip\"\>", 
   ",", "\<\"partisanship\"\>", ",", "\<\"partnership\"\>", 
   ",", "\<\"pawnshop\"\>", ",", "\<\"peep\"\>", ",", "\<\"penmanship\"\>", 
   ",", "\<\"pep\"\>", ",", "\<\"pickup\"\>", ",", "\<\"pileup\"\>", 
   ",", "\<\"pip\"\>", ",", "\<\"plop\"\>", ",", "\<\"plump\"\>", 
   ",", "\<\"polyp\"\>", ",", "\<\"pomp\"\>", ",", "\<\"pop\"\>", 
   ",", "\<\"premiership\"\>", ",", "\<\"prep\"\>", ",", "\<\"primp\"\>", 
   ",", "\<\"professorship\"\>", ",", "\<\"prop\"\>", 
   ",", "\<\"proprietorship\"\>", ",", "\<\"pulp\"\>", ",", "\<\"pump\"\>", 
   ",", "\<\"pup\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.933045198715712*^9, {3.934381532486414*^9, 3.9343815647409897`*^9}},
 CellLabel->"Out[36]=",ExpressionUUID->"508018fd-4ce6-49c1-93bd-696e3d43b299"]
}, Open  ]],

Cell["\<\
Q5. Make a list of the first 100 primes, keeping only ones whose last digit \
is less than 3.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045203578677*^9, 3.93304522593603*^9}, 
   3.933045635790896*^9, 
   3.934381577898674*^9},ExpressionUUID->"4cc71020-7d29-49a3-bfc3-\
646c5b5d6276"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Prime", "[", 
    RowBox[{"Range", "[", "100", "]"}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{"#", ",", "10"}], "]"}], "<", "3"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9330452161959753`*^9, 3.933045222768099*^9}, {
  3.9343815875703983`*^9, 3.9343816222029743`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"825f280a-41e5-4362-87a6-f624fac06d17"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2", ",", "11", ",", "31", ",", "41", ",", "61", ",", "71", ",", "101", ",",
    "131", ",", "151", ",", "181", ",", "191", ",", "211", ",", "241", ",", 
   "251", ",", "271", ",", "281", ",", "311", ",", "331", ",", "401", ",", 
   "421", ",", "431", ",", "461", ",", "491", ",", "521", ",", "541"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.933045227819075*^9, {3.9343815927543*^9, 3.934381622509819*^9}},
 CellLabel->"Out[38]=",ExpressionUUID->"e5aefcc2-6da9-4a2b-97c0-deff0b77c450"]
}, Open  ]],

Cell["Q6. Find Roman numerals up to 100 that do not contain \
\[OpenCurlyDoubleQuote]I\[CloseCurlyDoubleQuote].", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045239540092*^9, 3.933045245656156*^9}, 
   3.9330456351225863`*^9, 
   3.9343816384404182`*^9},ExpressionUUID->"15d543ab-3ebc-4e50-a2bc-\
616bacb89770"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"RomanNumeral", "[", 
    RowBox[{"Range", "[", "100", "]"}], "]"}], ",", 
   RowBox[{
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"Characters", "[", "#", "]"}], ",", "\"\<I\>\""}], "]"}]}], 
    "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.933045247978065*^9, 3.933045249195962*^9}, {
  3.934381645171186*^9, 3.934381668071211*^9}, {3.934381726986891*^9, 
  3.934381752181342*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"9239a3fb-05ce-4d30-8e3e-8417b9797d7a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"V\"\>", ",", "\<\"X\"\>", ",", "\<\"XV\"\>", ",", "\<\"XX\"\>",
    ",", "\<\"XXV\"\>", ",", "\<\"XXX\"\>", ",", "\<\"XXXV\"\>", 
   ",", "\<\"XL\"\>", ",", "\<\"XLV\"\>", ",", "\<\"L\"\>", ",", "\<\"LV\"\>",
    ",", "\<\"LX\"\>", ",", "\<\"LXV\"\>", ",", "\<\"LXX\"\>", 
   ",", "\<\"LXXV\"\>", ",", "\<\"LXXX\"\>", ",", "\<\"LXXXV\"\>", 
   ",", "\<\"XC\"\>", ",", "\<\"XCV\"\>", ",", "\<\"C\"\>"}], "}"}]], "Output",\

 CellChangeTimes->{
  3.9330452498837137`*^9, {3.9343816496313133`*^9, 3.934381668479607*^9}, {
   3.934381734010785*^9, 3.934381752894806*^9}},
 CellLabel->"Out[43]=",ExpressionUUID->"5cf28251-a925-4b55-80fe-fe0b534d3794"]
}, Open  ]],

Cell["\<\
Q7. Get a list of Roman numerals up to 1000 that are palindromes.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, 
   3.933045634341909*^9, 
   3.9343817674396667`*^9},ExpressionUUID->"6514e4f2-1111-4eee-a9c0-\
61d8a17bf02b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"RomanNumeral", "[", 
    RowBox[{"Range", "[", "1000", "]"}], "]"}], ",", 
   RowBox[{
    RowBox[{"#", "==", 
     RowBox[{"StringReverse", "[", "#", "]"}]}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.933045337091116*^9, 3.933045358138085*^9}, {
  3.9343817737486753`*^9, 3.934381791736887*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"f2b6d2de-1d2b-4de7-bbaf-b499d388ad3d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"I\"\>", ",", "\<\"II\"\>", ",", "\<\"III\"\>", 
   ",", "\<\"V\"\>", ",", "\<\"X\"\>", ",", "\<\"XIX\"\>", ",", "\<\"XX\"\>", 
   ",", "\<\"XXX\"\>", ",", "\<\"L\"\>", ",", "\<\"C\"\>", ",", "\<\"CXC\"\>",
    ",", "\<\"CC\"\>", ",", "\<\"CCC\"\>", ",", "\<\"D\"\>", 
   ",", "\<\"M\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.933045353336705*^9, 3.933045358970808*^9}, 
   3.934381792457944*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"004b9b03-8e8a-4939-89ba-809da42be3fc"]
}, Open  ]],

Cell["\<\
Q8. Find names of integers up to 100 that begin and end with the same letter.\
\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, {
   3.933045368732009*^9, 3.933045377536852*^9}, 3.933045632975415*^9, 
   3.934381826604991*^9},ExpressionUUID->"a07201d6-e16b-42df-82e0-\
7899e600f174"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"IntegerName", "[", 
    RowBox[{"Range", "[", "100", "]"}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"StringTake", "[", 
      RowBox[{"#", ",", 
       RowBox[{"-", "1"}]}], "]"}], "==", 
     RowBox[{"StringTake", "[", 
      RowBox[{"#", ",", "1"}], "]"}]}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.933045518782576*^9, 3.933045523538402*^9}, {
  3.934381847098147*^9, 3.9343818699170647`*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"b4adc608-a084-4abf-a5c1-caaefa266a88"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"nineteen\"\>", ",", "\<\"twenty\[Hyphen]eight\"\>", 
   ",", "\<\"thirty\[Hyphen]eight\"\>", ",", "\<\"eighty\[Hyphen]one\"\>", 
   ",", "\<\"eighty\[Hyphen]three\"\>", ",", "\<\"eighty\[Hyphen]five\"\>", 
   ",", "\<\"eighty\[Hyphen]nine\"\>", ",", "\<\"ninety\[Hyphen]seven\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.933045524804393*^9, {3.9343818549520693`*^9, 3.9343818713382053`*^9}},
 CellLabel->"Out[46]=",ExpressionUUID->"2d272fd8-6c3d-4f3c-a0f2-4a62b3cade99"]
}, Open  ]],

Cell["\<\
Q9. Get a list of words longer than 15 characters from the Wikipedia article \
on words.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, {
   3.933045368732009*^9, 3.933045377536852*^9}, {3.933045545062495*^9, 
   3.933045552087694*^9}, 3.933045632095289*^9, 
   3.934381883914444*^9},ExpressionUUID->"cbf5d670-7f78-4f95-a33f-\
6a3dc01884af"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"TextWords", "[", 
    RowBox[{"WikipediaData", "[", "\"\<words\>\"", "]"}], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"StringLength", "[", "#", "]"}], ">", "15"}], "&"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.933045556956818*^9, 3.933045560782413*^9}, {
  3.934381895031171*^9, 3.934381946591037*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"03b7cb1e-a5b2-4734-82dc-cd5661cd3e81"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"yibi-jarran-gabun\"\>", ",", "\<\"yibi-gabun-jarran\"\>", 
   ",", "\<\"orthographically\"\>", ",", "\<\"multiple-morpheme\"\>", 
   ",", "\<\"Proto-Indo-European\"\>", ",", "\<\"978-0-08-044854-1\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.9330455614167013`*^9, {3.934381912740904*^9, 3.934381948043745*^9}},
 CellLabel->"Out[49]=",ExpressionUUID->"3ece39f0-999a-4f7a-9280-bb43b1607de8"]
}, Open  ]],

Cell["\<\
Q10. Starting from 1000, divide by 2 if the number is even, and compute 3#+1& \
if the number is odd; do this repeatedly 200 times (Collatz problem).\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, {
   3.933045368732009*^9, 3.933045377536852*^9}, {3.933045545062495*^9, 
   3.933045552087694*^9}, 3.933045632095289*^9, 3.934381883914444*^9, {
   3.93438197187603*^9, 
   3.9343819817611237`*^9}},ExpressionUUID->"92386c72-5650-4ecd-b583-\
4707501461ae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Nest", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"EvenQ", "[", "#", "]"}], ",", 
      FractionBox["#", "2"], ",", 
      RowBox[{
       RowBox[{"3", "#"}], "+", "1"}]}], "]"}], "&"}], ",", "1000", ",", 
   "200"}], "]"}]], "Input",
 CellChangeTimes->{{3.933045556956818*^9, 3.933045560782413*^9}, {
  3.934381895031171*^9, 3.934381946591037*^9}, {3.934382048463108*^9, 
  3.9343820720104637`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"b3420691-480d-480e-a4b7-577a984c9b31"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{
  3.9330455614167013`*^9, {3.934381912740904*^9, 3.934381948043745*^9}, 
   3.9343820727320557`*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"8fb618f0-33d7-4659-9c30-5f8080e90dbe"]
}, Open  ]],

Cell["\<\
Q11. Make a word cloud of 5-letter words in the Wikipedia article on \
computers.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, {
   3.933045368732009*^9, 3.933045377536852*^9}, {3.933045545062495*^9, 
   3.933045552087694*^9}, 3.933045632095289*^9, 3.934381883914444*^9, {
   3.9343819735093203`*^9, 3.934381973682671*^9}, 
   3.9343820818726187`*^9},ExpressionUUID->"b6627e54-b9c2-418f-90c9-\
f8338e107dac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WordCloud", "[", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{"TextWords", "[", 
     RowBox[{"WikipediaData", "[", "\"\<computers\>\"", "]"}], "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"StringLength", "[", "#", "]"}], "==", "5"}], "&"}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.933045556956818*^9, 3.933045560782413*^9}, {
  3.934381895031171*^9, 3.934381946591037*^9}, {3.9343821811137733`*^9, 
  3.934382206569015*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"35ec5494-e622-4429-bd5d-7cfcc235dcfd"],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    StyleBox["\<\"first\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.2517985611510791],
     FontColor->RGBColor[0.368417, 0.506779, 0.709798]], {0, 0}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"which\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.19784172661870505`],
     FontColor->RGBColor[0.880722, 0.611041, 0.142051]], {0., 49.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"input\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.11935905820797907`],
     FontColor->RGBColor[0.528488, 0.470624, 0.701351]], {-3., -39.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"Early\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.1144538914323087],
     FontColor->RGBColor[1, 0.75, 0]], {0., -66.}, Center, Automatic], 
   InsetBox[
    StyleBox["\<\"These\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.11935905820797907`],
     FontColor->RGBColor[0.772079, 0.431554, 0.102387]], {0., 85.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"often\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.12916939175931982`],
     FontColor->RGBColor[0.560181, 0.691569, 0.194885]], {-76., -33.}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"other\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.12426422498364946`],
     FontColor->RGBColor[0.922526, 0.385626, 0.209179]], {73., -39.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"using\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.09483322432962721],
     FontColor->RGBColor[0.647624, 0.37816, 0.614037]], {78., -3.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"built\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.1144538914323087],
     FontColor->RGBColor[0.363898, 0.618501, 0.782349]], {-84., -4.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"known\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.08992805755395684],
     FontColor->RGBColor[0.915, 0.3325, 0.2125]], {-19., -85.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"logic\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.08502289077828647],
     FontColor->RGBColor[0.736782672705901, 0.358, 0.5030266573755369]], {-56., -59.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"power\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07521255722694573],
     FontColor->RGBColor[
      0.5833680111493557, 0.4126186601628758, 0.8290799721266107]], {-80., 21.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"could\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.08992805755395684],
     FontColor->RGBColor[0.571589, 0.586483, 0.]], {86., 19.}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"since\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.08992805755395684],
     FontColor->RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85]], {62., -64.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"speed\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06540222367560498],
     FontColor->RGBColor[0.47401116530937026`, 0.47809330081437784`, 0.85]], {-60., 66.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"being\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07030739045127535],
     FontColor->RGBColor[
      0.6753413537738198, 0.3589675436319385, 0.5991466155654507]], {-90., 37.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"their\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.08992805755395684],
     FontColor->RGBColor[
      0.9728288904374106, 0.621644452187053, 0.07336199581899142]], {92., 39.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"given\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06540222367560498],
     FontColor->RGBColor[
      0.8857244243136628, 0.3764133635295058, 0.1393110607841571]], {50., -83.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"tubes\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.08011772400261609],
     FontColor->RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965]], {9., 101.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"would\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07521255722694573],
     FontColor->RGBColor[
      0.9324333565611593, 0.5282889043741062, 0.0921900209050434]], {77., 67.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"while\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07521255722694573],
     FontColor->RGBColor[
      0.28240003484173815`, 0.6090799721266095, 0.7538800418100857]], {-65., 78.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Later\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07521255722694573],
     FontColor->RGBColor[
      0.838355547812947, 0.44746667828057946`, 0.0208888695323676]], {63., 80.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"there\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07521255722694573],
     FontColor->RGBColor[
      0.8439466852489265, 0.3467106629502147, 0.3309221912517893]], {0., -105.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"tasks\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07030739045127535],
     FontColor->RGBColor[0.5407932311309059, 0.715, 0.09762679674248334]], {-76., -79.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"store\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.07521255722694573],
     FontColor->RGBColor[0.8996399512215667, 0.7463488834690629, 0.]], {-46., -101.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"World\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06540222367560498],
     FontColor->RGBColor[
      0.9874666782805795, 0.6948333914028977, 0.033839968642435214`]], {46., -102.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"might\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05559189012426423],
     FontColor->RGBColor[
      0.35558897405758294`, 0.5505288207539337, 0.8417067688690995]], {54., 98.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"paper\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[
      0.8168067340273636, 0.3521386531945273, 0.3761554432877274]], {0., 21.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"began\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[
      0.8564488486273256, 0.42032672705901153`, 0.06612212156831418]], {-98., 52.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"large\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06049705689993459],
     FontColor->RGBColor[
      0.16397784358994957`, 0.7038177251280403, 0.6117734123079395]], {-98., -54.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Types\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[
      0.9038177251280404, 0.3492734123079395, 0.18454431282010084`]], {-44., 103.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"parts\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06049705689993459],
     FontColor->RGBColor[
      0.8613800418100862, 0.48092002787339083`, 0.02824203762907758]], {89., -79.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"human\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05559189012426423],
     FontColor->RGBColor[
      0.8878600487784333, 0.33792799024431336`, 0.2577332520359445]], {95., -24.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"years\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05559189012426423],
     FontColor->RGBColor[
      0.9637822400302223, 0.5764112001511111, 0.0977879519184]], {-78., 92.}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"ENIAC\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06049705689993459],
     FontColor->RGBColor[0.7748409210981391, 0.358, 0.4444755060028629]], {28., 112.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"times\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.06049705689993459],
     FontColor->RGBColor[
      0.6184987019729621, 0.39212575718243875`, 0.7412532450675947]], {-89., -91.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"means\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[0.5472001045252132, 0.43417993728487203`, 0.85]], {91., -93.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"where\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[
      0.9784200278733908, 0.649600139366954, 0.058265924741844846`]], {94., 90.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"about\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[0.37977756485605163`, 0.715, 0.3025558265468435]], {69., 111.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"after\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05559189012426423],
     FontColor->RGBColor[0.7678998606330495, 0.7317110956258943, 0.]], {-102., 64.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"1950s\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[0.7132613816472081, 0.358, 0.5392132590042952]], {-81., 103.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"women\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04578155657292348],
     FontColor->RGBColor[
      0.9930578157165594, 0.7227890785827968, 0.01874389756528967]], {-17., 113.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"small\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[
      0.6536293927965667, 0.37163285420200276`, 0.6534265180085832]], {-86., -105.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"order\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[0.9810598048862722, 0.7553955338762525, 0.]], {87., -107.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"usage\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.9840111653093676, 0.677555826546838, 0.04316985366470745]], {104., -57.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"range\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[0.5788038738141875, 0.715, 0.049249615145579635`]], {103., 101.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"write\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[0.7513196300394465, 0.358, 0.48066210763162087`]], {25., -118.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"solve\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[0.6361597700445392, 0.7170733077827265, 0.]], {-25., -118.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"place\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.6670481226429111, 0.3638052617916352, 0.6198796933927223]], {-29., 121.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"gates\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.8335801463353031, 0.3487839707329394, 0.3481997561078282]], {-57., 115.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"every\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.845266573755366, 0.437100139366951, 0.03816643438841502]], {-56., -116.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"bytes\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.9046334610863751, 0.334573307782725, 0.22977756485604156`]], {-111., -68.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Kilby\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04578155657292348],
     FontColor->RGBColor[
      0.3103557220216354, 0.5867154223826917, 0.7874268664259625]], {-103., 76.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"roots\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[
      0.23716678280579248`, 0.645266573755366, 0.699600139366951]], {57., -118.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"slide\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[
      0.9052934053395919, 0.510195603559728, 0.06776406480563275]], {-110., 87.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Mouse\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04578155657292348],
     FontColor->RGBColor[0.6897400905885174, 0.358, 0.5753998606330502]], {66., 122.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"until\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.05068672334859386],
     FontColor->RGBColor[0.428777913273419, 0.5052332520359486, 0.85]], {-86., 114.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"equal\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[
      0.9986489531525362, 0.7507447657626809, 0.0036478264881522893`]], {113., -68.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"doing\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[0.4177882075393331, 0.715, 0.25417864494993975`]], {-83., -117.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Berry\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[
      0.8774935098648088, 0.34000129802703827`, 0.2750108168919853]], {86., -119.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Along\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[
      0.6102054708420535, 0.39696347534213544`, 0.7619863228948663]], {-112., 100.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"meant\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.922066817647527, 0.5213778784316846, 0.08286013588277422]], {105., 110.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"under\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04578155657292348],
     FontColor->RGBColor[
      0.8745421494417032, 0.39318677583744527`, 0.11135537360425793`]], {101., 120.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"based\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04578155657292348],
     FontColor->RGBColor[
      0.8342400905885153, 0.4628267270590103, 0.0038160815296638794`]], {-101., 122.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"carry\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[
      0.9603267270590103, 0.5591336352950514, 0.10711783694067224`]], {24., 66.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"ahead\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.7896667828057927, 0.3575666434388414, 0.4213886953236787]], {-112., -118.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cause\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04578155657292348],
     FontColor->RGBColor[0.8493197142977551, 0.7407577460330839, 0.]], {-123., 14.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"1970s\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04578155657292348],
     FontColor->RGBColor[0.2187618985811806, 0.715, 0.5074848563512248]], {1., 124.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"great\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[0.6672593867853922, 0.7205288207539324, 0.]], {122., 0.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"chips\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[0.7042770479220728, 0.358, 0.5530353108891188]], {-119., 24.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"1,500\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[0.7658565873730018, 0.358, 0.4582975578876895]], {125., -12.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"video\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04578155657292348],
     FontColor->RGBColor[0.5019668524892619, 0.46131988850644284`, 0.85]], {33., 124.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"gives\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[
      0.6453361616656581, 0.37647057236169945`, 0.6741595958358548]], {-124., -20.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"eight\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[0.529922539669161, 0.44454647619850335`, 0.85]], {-126., 0.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"found\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[0.9307395679624266, 0.7498043964402695, 0.]], {118., 54.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cache\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[0.38354466123747527`, 0.5323732032575149, 0.85]], {0., -129.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cards\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04578155657292348],
     FontColor->RGBColor[
      0.596786740995709, 0.404791067752503, 0.7955331475107271]], {122., -45.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"clock\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[0.7277983389807635, 0.358, 0.5168487092603637]], {117., 64.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"short\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04578155657292348],
     FontColor->RGBColor[0.47929071933511125`, 0.715, 0.1759027208462221]], {-28., 131.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cases\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.969373377466199, 0.6043668873309952, 0.08269188084126262]], {-29., -129.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"allow\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.19193353076984873`, 0.681453175384121, 0.6453202369238185]], {29., -131.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"April\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[0.7989994773739094, 0.735166608597101, 0.]], {126., 10.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"build\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[0.7175796237092107, 0.7261199581899123, 0.]], {-125., 34.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"basis\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.6319174318193065, 0.38429816477207124`, 0.7077064204517338]], {-55., 125.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"basic\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.8781534541180211, 0.4921023027453475, 0.04333810870621905]], {117., 74.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"above\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[
      0.8510135028964549, 0.47400900193096995`, 0.018912152606809424`]], {1., 134.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"rules\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.8926354502560807, 0.366046824615879, 0.15658862564020168`]], {-56., -128.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"error\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[0.31827505306025683`, 0.715, 0.3808317506505822]], {47., 132.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"cells\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04578155657292348],
     FontColor->RGBColor[
      0.8607200975568693, 0.34335598048862614`, 0.30296650407188447`]], {56., -131.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"event\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[
      0.8064401951137368, 0.3542119609772526, 0.39343300814377197`]], {120., -78.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"level\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.26512246998569167`, 0.6229020240114467, 0.73314696398283]], {-121., -82.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"flash\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[
      0.5750747800184488, 0.4174563783225715, 0.8498130499538777]], {73., 130.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"drove\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[
      0.8633598745697435, 0.40996018814538476`, 0.08339968642435877]], {-82., -127.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"break\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[
      0.3383114092015346, 0.5643508726387724, 0.8209736910418415]], {-121., -94.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"2000s\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[0.15725938678540247`, 0.715, 0.5857607804549424]], {83., -131.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"lists\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04578155657292348],
     FontColor->RGBColor[
      0.9492067688690977, 0.5394711792460651, 0.10728609198218791`]], {126., 20.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"fixed\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[
      0.8949268664259606, 0.5032845776173072, 0.05843417978336459]], {127., 30.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"Intel\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[
      0.9107287510704583, 0.33890687339431275`, 0.20182187767614543`]], {-127., -32.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"still\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.04087638979725311],
     FontColor->RGBColor[0.4567336004533182, 0.4884598397280091, 0.85]], {128., -23.},
     Center, Automatic], InsetBox[
    StyleBox["\<\"field\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.03597122302158273],
     FontColor->RGBColor[
      0.2198892179497479, 0.6590886256402017, 0.6788670615396974]], {-126., -42.},
     Center, Automatic]},
  DefaultBaseStyle->{"Graphics", FontFamily -> "Source Sans Pro"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic},
  PlotRange->{{-139.5, 138.5}, {-137.5, 139.5}}]], "Output",
 CellChangeTimes->{
  3.9330455614167013`*^9, {3.934381912740904*^9, 3.934381948043745*^9}, 
   3.9343822095501328`*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"72ca11d1-c299-4403-9887-42c66081ff82"]
}, Open  ]],

Cell["\<\
Q12. Find words in WordList[ ] whose first 3 letters are the same as their \
last 3 read backward, but where the whole string is not a palindrome.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, {
   3.933045368732009*^9, 3.933045377536852*^9}, {3.933045545062495*^9, 
   3.933045552087694*^9}, 3.933045632095289*^9, 3.934381883914444*^9, {
   3.934381974684143*^9, 3.934381974925188*^9}, 
   3.934382227360427*^9},ExpressionUUID->"9c92f295-553b-40e6-9e77-\
49b25dd33c09"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"WordList", "[", "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"StringLength", "[", "#", "]"}], ">=", "3"}], "&&", 
     RowBox[{"#", "!=", 
      RowBox[{"StringReverse", "[", "#", "]"}]}], "&&", 
     RowBox[{
      RowBox[{"StringReverse", "[", 
       RowBox[{"StringTake", "[", 
        RowBox[{"#", ",", 
         RowBox[{"-", "3"}]}], "]"}], "]"}], "==", 
      RowBox[{"StringTake", "[", 
       RowBox[{"#", ",", "3"}], "]"}]}]}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.933045556956818*^9, 3.933045560782413*^9}, {
  3.934381895031171*^9, 3.934381946591037*^9}, {3.9343823073033*^9, 
  3.934382335740438*^9}, {3.934382409663484*^9, 3.934382432265682*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"e5e71d5d-55d1-4cb3-9c23-2f3edf54914a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"despised\"\>", ",", "\<\"detected\"\>", 
   ",", "\<\"detested\"\>", ",", "\<\"drainboard\"\>", 
   ",", "\<\"foolproof\"\>", ",", "\<\"lackadaisical\"\>", 
   ",", "\<\"marjoram\"\>", ",", "\<\"revolver\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.9330455614167013`*^9, {3.934381912740904*^9, 3.934381948043745*^9}, {
   3.9343823284592876`*^9, 3.93438233610926*^9}, 3.93438243361277*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"3c86a101-f391-41cd-845c-42e6cd13adf5"]
}, Open  ]],

Cell["\<\
Q13. Find all 10-letter words in WordList[ ] for which the total of \
LetterNumber values is 100.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, {
   3.933045368732009*^9, 3.933045377536852*^9}, {3.933045545062495*^9, 
   3.933045552087694*^9}, 3.933045632095289*^9, 3.934381883914444*^9, {
   3.934381975874159*^9, 3.9343819761478767`*^9}, 
   3.934382450208753*^9},ExpressionUUID->"a9d88afe-7b34-4f38-8e71-\
c50267ab6df9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"WordList", "[", "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Total", "[", 
      RowBox[{"LetterNumber", "[", 
       RowBox[{"Characters", "[", "#", "]"}], "]"}], "]"}], "==", "100"}], 
    "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.933045556956818*^9, 3.933045560782413*^9}, {
  3.934381895031171*^9, 3.934381946591037*^9}, {3.934382505108446*^9, 
  3.934382552218383*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"d6cb706a-532a-4d3f-b3a9-5693ebd0d8a5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"acclimation\"\>", ",", "\<\"accumulate\"\>", 
   ",", "\<\"acknowledge\"\>", ",", "\<\"acquitted\"\>", 
   ",", "\<\"adulthood\"\>", ",", "\<\"affectation\"\>", 
   ",", "\<\"alienation\"\>", ",", "\<\"amiableness\"\>", 
   ",", "\<\"analysis\"\>", ",", "\<\"annually\"\>", 
   ",", "\<\"answerable\"\>", ",", "\<\"anterior\"\>", 
   ",", "\<\"apoplectic\"\>", ",", "\<\"appertain\"\>", 
   ",", "\<\"appointed\"\>", ",", "\<\"apropos\"\>", 
   ",", "\<\"aquamarine\"\>", ",", "\<\"archdiocesan\"\>", 
   ",", "\<\"asbestos\"\>", ",", "\<\"attitude\"\>", ",", "\<\"autoclave\"\>",
    ",", "\<\"automated\"\>", ",", "\<\"avocation\"\>", 
   ",", "\<\"awfully\"\>", ",", "\<\"beetroot\"\>", 
   ",", "\<\"benediction\"\>", ",", "\<\"bettering\"\>", 
   ",", "\<\"bewitching\"\>", ",", "\<\"bipartite\"\>", 
   ",", "\<\"birthmark\"\>", ",", "\<\"blissful\"\>", ",", "\<\"botanist\"\>",
    ",", "\<\"bouillon\"\>", ",", "\<\"boulevard\"\>", 
   ",", "\<\"boundary\"\>", ",", "\<\"boycott\"\>", ",", "\<\"breviary\"\>", 
   ",", "\<\"bronchus\"\>", ",", "\<\"browser\"\>", ",", "\<\"burnished\"\>", 
   ",", "\<\"cacophony\"\>", ",", "\<\"candidature\"\>", 
   ",", "\<\"cardiograph\"\>", ",", "\<\"carouser\"\>", 
   ",", "\<\"carpenter\"\>", ",", "\<\"carroty\"\>", 
   ",", "\<\"censurable\"\>", ",", "\<\"ceramicist\"\>", 
   ",", "\<\"chastening\"\>", ",", "\<\"chimpanzee\"\>", 
   ",", "\<\"chromium\"\>", ",", "\<\"clinically\"\>", 
   ",", "\<\"clockwise\"\>", ",", "\<\"clotting\"\>", ",", "\<\"coatroom\"\>",
    ",", "\<\"collecting\"\>", ",", "\<\"cometary\"\>", 
   ",", "\<\"companion\"\>", ",", "\<\"comport\"\>", ",", "\<\"concavely\"\>",
    ",", "\<\"condensate\"\>", ",", "\<\"confabulate\"\>", 
   ",", "\<\"congenital\"\>", ",", "\<\"congress\"\>", 
   ",", "\<\"conjoint\"\>", ",", "\<\"conjugated\"\>", 
   ",", "\<\"conjunct\"\>", ",", "\<\"connivance\"\>", 
   ",", "\<\"contented\"\>", ",", "\<\"cookout\"\>", ",", "\<\"corridor\"\>", 
   ",", "\<\"costumed\"\>", ",", "\<\"couchette\"\>", ",", "\<\"coverlet\"\>",
    ",", "\<\"coyness\"\>", ",", "\<\"creosote\"\>", ",", "\<\"crudity\"\>", 
   ",", "\<\"culture\"\>", ",", "\<\"curettage\"\>", ",", "\<\"cutout\"\>", 
   ",", "\<\"cysteine\"\>", ",", "\<\"debarkation\"\>", 
   ",", "\<\"declarative\"\>", ",", "\<\"declension\"\>", 
   ",", "\<\"decorous\"\>", ",", "\<\"deliquesce\"\>", 
   ",", "\<\"delivery\"\>", ",", "\<\"demobilize\"\>", 
   ",", "\<\"demodulate\"\>", ",", "\<\"denominate\"\>", 
   ",", "\<\"depletion\"\>", ",", "\<\"dewberry\"\>", 
   ",", "\<\"diagonally\"\>", ",", "\<\"digestive\"\>", 
   ",", "\<\"dinginess\"\>", ",", "\<\"disarranged\"\>", 
   ",", "\<\"discernible\"\>", ",", "\<\"discipline\"\>", 
   ",", "\<\"discommode\"\>", ",", "\<\"discredited\"\>", 
   ",", "\<\"disjoint\"\>", ",", "\<\"dispraise\"\>", ",", "\<\"distrait\"\>",
    ",", "\<\"divinely\"\>", ",", "\<\"dooryard\"\>", 
   ",", "\<\"doubleheader\"\>", ",", "\<\"drizzle\"\>", 
   ",", "\<\"dumbfound\"\>", ",", "\<\"duologue\"\>", 
   ",", "\<\"ebullient\"\>", ",", "\<\"egoistical\"\>", 
   ",", "\<\"elsewhere\"\>", ",", "\<\"emasculate\"\>", 
   ",", "\<\"embodiment\"\>", ",", "\<\"emendation\"\>", 
   ",", "\<\"empathetic\"\>", ",", "\<\"encrust\"\>", ",", "\<\"epitaxy\"\>", 
   ",", "\<\"espouse\"\>", ",", "\<\"eulogize\"\>", ",", "\<\"eventual\"\>", 
   ",", "\<\"excellent\"\>", ",", "\<\"excoriate\"\>", 
   ",", "\<\"falseness\"\>", ",", "\<\"fatalistic\"\>", 
   ",", "\<\"fatherhood\"\>", ",", "\<\"ferryman\"\>", 
   ",", "\<\"finitely\"\>", ",", "\<\"fluorine\"\>", ",", "\<\"flurry\"\>", 
   ",", "\<\"forefoot\"\>", ",", "\<\"forewarn\"\>", ",", "\<\"forgiver\"\>", 
   ",", "\<\"forsaking\"\>", ",", "\<\"fountain\"\>", ",", "\<\"frisson\"\>", 
   ",", "\<\"gauntlet\"\>", ",", "\<\"geographer\"\>", 
   ",", "\<\"gladiolus\"\>", ",", "\<\"glissando\"\>", 
   ",", "\<\"glutamate\"\>", ",", "\<\"godparent\"\>", 
   ",", "\<\"grandaunt\"\>", ",", "\<\"grappling\"\>", ",", "\<\"grouper\"\>",
    ",", "\<\"grumpy\"\>", ",", "\<\"harmonics\"\>", ",", "\<\"healthily\"\>",
    ",", "\<\"hemoglobin\"\>", ",", "\<\"hirsute\"\>", 
   ",", "\<\"hobbyist\"\>", ",", "\<\"hollering\"\>", 
   ",", "\<\"holograph\"\>", ",", "\<\"honeycomb\"\>", 
   ",", "\<\"honoring\"\>", ",", "\<\"hospital\"\>", ",", "\<\"hotness\"\>", 
   ",", "\<\"imbroglio\"\>", ",", "\<\"immature\"\>", 
   ",", "\<\"impaction\"\>", ",", "\<\"imported\"\>", 
   ",", "\<\"impotence\"\>", ",", "\<\"inadequacy\"\>", 
   ",", "\<\"inapplicable\"\>", ",", "\<\"inefficient\"\>", 
   ",", "\<\"inflation\"\>", ",", "\<\"ingrown\"\>", ",", "\<\"innately\"\>", 
   ",", "\<\"innovate\"\>", ",", "\<\"inoculate\"\>", 
   ",", "\<\"insecticide\"\>", ",", "\<\"intellect\"\>", 
   ",", "\<\"interbreed\"\>", ",", "\<\"interfere\"\>", 
   ",", "\<\"irritate\"\>", ",", "\<\"jailhouse\"\>", 
   ",", "\<\"judiciary\"\>", ",", "\<\"kibitzer\"\>", ",", "\<\"knothole\"\>",
    ",", "\<\"landholding\"\>", ",", "\<\"landscaping\"\>", 
   ",", "\<\"largeness\"\>", ",", "\<\"leveraging\"\>", 
   ",", "\<\"liberalism\"\>", ",", "\<\"liberator\"\>", 
   ",", "\<\"lightning\"\>", ",", "\<\"likelihood\"\>", 
   ",", "\<\"limpidly\"\>", ",", "\<\"litotes\"\>", ",", "\<\"lubricant\"\>", 
   ",", "\<\"macrocosm\"\>", ",", "\<\"magnetize\"\>", 
   ",", "\<\"martinet\"\>", ",", "\<\"martingale\"\>", 
   ",", "\<\"matchless\"\>", ",", "\<\"matchmaking\"\>", 
   ",", "\<\"maximize\"\>", ",", "\<\"meatpacking\"\>", 
   ",", "\<\"mercantile\"\>", ",", "\<\"mercurial\"\>", 
   ",", "\<\"merganser\"\>", ",", "\<\"meridional\"\>", 
   ",", "\<\"merrily\"\>", ",", "\<\"midpoint\"\>", ",", "\<\"mirrored\"\>", 
   ",", "\<\"misdirect\"\>", ",", "\<\"missus\"\>", ",", "\<\"molecular\"\>", 
   ",", "\<\"morphemic\"\>", ",", "\<\"moussaka\"\>", ",", "\<\"mummify\"\>", 
   ",", "\<\"nastily\"\>", ",", "\<\"neoclassic\"\>", ",", "\<\"nestling\"\>",
    ",", "\<\"neuronal\"\>", ",", "\<\"nihilist\"\>", ",", "\<\"ninepins\"\>",
    ",", "\<\"nonhuman\"\>", ",", "\<\"nostalgic\"\>", 
   ",", "\<\"notional\"\>", ",", "\<\"numeracy\"\>", ",", "\<\"nutty\"\>", 
   ",", "\<\"obscenely\"\>", ",", "\<\"offhandedly\"\>", 
   ",", "\<\"operetta\"\>", ",", "\<\"ornament\"\>", ",", "\<\"outflank\"\>", 
   ",", "\<\"outlier\"\>", ",", "\<\"outlined\"\>", ",", "\<\"outrank\"\>", 
   ",", "\<\"outset\"\>", ",", "\<\"overboard\"\>", ",", "\<\"palpitate\"\>", 
   ",", "\<\"paramecium\"\>", ",", "\<\"pasture\"\>", ",", "\<\"pathless\"\>",
    ",", "\<\"personage\"\>", ",", "\<\"personal\"\>", ",", "\<\"perturb\"\>",
    ",", "\<\"phagocyte\"\>", ",", "\<\"phlebitis\"\>", 
   ",", "\<\"pianistic\"\>", ",", "\<\"pilaster\"\>", 
   ",", "\<\"pistachio\"\>", ",", "\<\"plastered\"\>", 
   ",", "\<\"plebiscite\"\>", ",", "\<\"plummet\"\>", ",", "\<\"plummy\"\>", 
   ",", "\<\"postdate\"\>", ",", "\<\"posting\"\>", ",", "\<\"postpaid\"\>", 
   ",", "\<\"potbellied\"\>", ",", "\<\"pounding\"\>", ",", "\<\"pouring\"\>",
    ",", "\<\"prevent\"\>", ",", "\<\"primary\"\>", ",", "\<\"printer\"\>", 
   ",", "\<\"producer\"\>", ",", "\<\"profuse\"\>", ",", "\<\"progeny\"\>", 
   ",", "\<\"publicly\"\>", ",", "\<\"pumpkin\"\>", ",", "\<\"pursue\"\>", 
   ",", "\<\"putter\"\>", ",", "\<\"pyridine\"\>", ",", "\<\"quadrangle\"\>", 
   ",", "\<\"quarry\"\>", ",", "\<\"quarter\"\>", ",", "\<\"quicklime\"\>", 
   ",", "\<\"radiocarbon\"\>", ",", "\<\"raillery\"\>", 
   ",", "\<\"ravisher\"\>", ",", "\<\"receptor\"\>", 
   ",", "\<\"reciprocal\"\>", ",", "\<\"redeploy\"\>", 
   ",", "\<\"refinery\"\>", ",", "\<\"reflation\"\>", 
   ",", "\<\"regimented\"\>", ",", "\<\"regroup\"\>", ",", "\<\"reimpose\"\>",
    ",", "\<\"renovate\"\>", ",", "\<\"repress\"\>", ",", "\<\"reprint\"\>", 
   ",", "\<\"reprobate\"\>", ",", "\<\"reputable\"\>", 
   ",", "\<\"reschedule\"\>", ",", "\<\"researcher\"\>", 
   ",", "\<\"reshuffle\"\>", ",", "\<\"resolved\"\>", ",", "\<\"restore\"\>", 
   ",", "\<\"retiring\"\>", ",", "\<\"reversal\"\>", ",", "\<\"riverbank\"\>",
    ",", "\<\"roadster\"\>", ",", "\<\"roomful\"\>", ",", "\<\"roommate\"\>", 
   ",", "\<\"ruction\"\>", ",", "\<\"sagebrush\"\>", ",", "\<\"saintlike\"\>",
    ",", "\<\"saintly\"\>", ",", "\<\"salacious\"\>", ",", "\<\"savory\"\>", 
   ",", "\<\"scoreboard\"\>", ",", "\<\"scrapbook\"\>", 
   ",", "\<\"scrummage\"\>", ",", "\<\"sculpted\"\>", ",", "\<\"scuttle\"\>", 
   ",", "\<\"selective\"\>", ",", "\<\"self-defense\"\>", 
   ",", "\<\"semaphore\"\>", ",", "\<\"semitone\"\>", 
   ",", "\<\"septicemia\"\>", ",", "\<\"services\"\>", ",", "\<\"session\"\>",
    ",", "\<\"shadowing\"\>", ",", "\<\"shakedown\"\>", 
   ",", "\<\"shakeout\"\>", ",", "\<\"shattered\"\>", 
   ",", "\<\"shibboleth\"\>", ",", "\<\"shipyard\"\>", ",", "\<\"shooter\"\>",
    ",", "\<\"shortcake\"\>", ",", "\<\"shrieking\"\>", 
   ",", "\<\"sightly\"\>", ",", "\<\"simulate\"\>", ",", "\<\"sleepyhead\"\>",
    ",", "\<\"smitten\"\>", ",", "\<\"snobbery\"\>", ",", "\<\"socialism\"\>",
    ",", "\<\"soughing\"\>", ",", "\<\"sparkler\"\>", ",", "\<\"spirited\"\>",
    ",", "\<\"splashy\"\>", ",", "\<\"spyhole\"\>", ",", "\<\"squint\"\>", 
   ",", "\<\"stagecraft\"\>", ",", "\<\"stalemated\"\>", 
   ",", "\<\"starfish\"\>", ",", "\<\"starling\"\>", ",", "\<\"status\"\>", 
   ",", "\<\"strangled\"\>", ",", "\<\"stress\"\>", ",", "\<\"striker\"\>", 
   ",", "\<\"subsume\"\>", ",", "\<\"sucrose\"\>", ",", "\<\"surcharge\"\>", 
   ",", "\<\"surely\"\>", ",", "\<\"sweetened\"\>", ",", "\<\"sweptback\"\>", 
   ",", "\<\"swimmer\"\>", ",", "\<\"swollen\"\>", ",", "\<\"syndicate\"\>", 
   ",", "\<\"tailspin\"\>", ",", "\<\"telephone\"\>", 
   ",", "\<\"telescope\"\>", ",", "\<\"temperance\"\>", 
   ",", "\<\"temporal\"\>", ",", "\<\"tensely\"\>", ",", "\<\"tetanus\"\>", 
   ",", "\<\"thalidomide\"\>", ",", "\<\"therefore\"\>", 
   ",", "\<\"thickening\"\>", ",", "\<\"thievish\"\>", ",", "\<\"thirty\"\>", 
   ",", "\<\"thorny\"\>", ",", "\<\"threatened\"\>", ",", "\<\"thumbnail\"\>",
    ",", "\<\"tinkerer\"\>", ",", "\<\"towards\"\>", ",", "\<\"traction\"\>", 
   ",", "\<\"trademarked\"\>", ",", "\<\"transect\"\>", 
   ",", "\<\"transom\"\>", ",", "\<\"trembling\"\>", ",", "\<\"triplet\"\>", 
   ",", "\<\"tropics\"\>", ",", "\<\"truism\"\>", ",", "\<\"tularemia\"\>", 
   ",", "\<\"tuppence\"\>", ",", "\<\"turkey\"\>", ",", "\<\"turnoff\"\>", 
   ",", "\<\"twisted\"\>", ",", "\<\"unaltered\"\>", 
   ",", "\<\"unavailable\"\>", ",", "\<\"unbounded\"\>", 
   ",", "\<\"unbridgeable\"\>", ",", "\<\"unbroken\"\>", 
   ",", "\<\"uncombined\"\>", ",", "\<\"underdone\"\>", 
   ",", "\<\"underlay\"\>", ",", "\<\"undress\"\>", ",", "\<\"unequaled\"\>", 
   ",", "\<\"unfasten\"\>", ",", "\<\"unfreeze\"\>", ",", "\<\"unhorse\"\>", 
   ",", "\<\"unkempt\"\>", ",", "\<\"unlighted\"\>", ",", "\<\"unmanly\"\>", 
   ",", "\<\"unmatchable\"\>", ",", "\<\"unmodified\"\>", 
   ",", "\<\"unrelated\"\>", ",", "\<\"unwearied\"\>", 
   ",", "\<\"urbanized\"\>", ",", "\<\"urticaria\"\>", ",", "\<\"useless\"\>",
    ",", "\<\"utensil\"\>", ",", "\<\"variety\"\>", ",", "\<\"varnished\"\>", 
   ",", "\<\"venation\"\>", ",", "\<\"verbalize\"\>", ",", "\<\"vinous\"\>", 
   ",", "\<\"vouchsafe\"\>", ",", "\<\"waterbird\"\>", 
   ",", "\<\"Wednesday\"\>", ",", "\<\"whenever\"\>", ",", "\<\"whirling\"\>",
    ",", "\<\"whiskey\"\>", ",", "\<\"wholesale\"\>", ",", "\<\"whooper\"\>", 
   ",", "\<\"writing\"\>", ",", "\<\"yarrow\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.9330455614167013`*^9, {3.934381912740904*^9, 3.934381948043745*^9}, 
   3.934382566956312*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"6f0e1c6c-f133-4a1c-bde3-fc571f732999"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extended Questions", "Section",
 CellChangeTimes->{{3.933045572414176*^9, 
  3.933045576505332*^9}},ExpressionUUID->"e793ec72-45f5-4ef9-a564-\
fc731fa426cc"],

Cell["\<\
+Q1. Make a table of integers up to 25 where every integer ending in 3 is \
replaced with 0.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, {
   3.933045368732009*^9, 3.933045377536852*^9}, {3.933045545062495*^9, 
   3.933045552087694*^9}, {3.933045582724339*^9, 3.933045598952709*^9}, 
   3.933045631467128*^9, 
   3.934382589192621*^9},ExpressionUUID->"f9b4ce67-8ae1-4a55-aa64-\
fb04635f242a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"IntegerDigits", "[", "#", "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "1"}], "]"}], "]"}], "==", "3"}], ",", "0", ",", "#"}], 
    "]"}], "&"}], "/@", 
  RowBox[{"Range", "[", "25", "]"}]}]], "Input",
 CellChangeTimes->{{3.933045601648616*^9, 3.933045605875023*^9}, {
  3.934382602023405*^9, 3.934382627312026*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"10acab31-849d-4bed-a18e-36e14a881ada"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "0", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10", ",", "11", ",", "12", ",", "0", ",", "14", ",", "15", 
   ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", 
   "22", ",", "0", ",", "24", ",", "25"}], "}"}]], "Output",
 CellChangeTimes->{3.933045606539266*^9, 3.934382627894105*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"b900f5e6-caae-49bb-9736-7ef4b0343df2"]
}, Open  ]],

Cell["\<\
+Q2. Use Table and If to make a 5\[Times]5 array that is 1 on its leading \
diagonal, and 0 otherwise.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, {
   3.933045368732009*^9, 3.933045377536852*^9}, {3.933045545062495*^9, 
   3.933045552087694*^9}, {3.933045582724339*^9, 3.933045630763904*^9}, 
   3.934382642489847*^9},ExpressionUUID->"5bf6ba5a-4c99-4b6e-89f4-\
37c133010940"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"i", "==", "j"}], ",", "1", ",", "0"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.933045646511365*^9, 3.9330456475080767`*^9}, {
  3.9343826632496243`*^9, 3.9343826749308167`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"196522a9-c494-4d14-9a34-e5eb61ae14a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "1"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.933045648095525*^9, 3.934382675346122*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"2a989707-8ab0-4718-8688-7ac381a0e8ad"]
}, Open  ]],

Cell["\<\
+Q3. Get a list of numbers up to 1000 that are equal to 1 mod both 7 and 8.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, {
   3.933045368732009*^9, 3.933045377536852*^9}, {3.933045545062495*^9, 
   3.933045552087694*^9}, {3.933045582724339*^9, 3.933045598952709*^9}, {
   3.933045654828909*^9, 3.9330456668860083`*^9}, 3.933045736409889*^9, 
   3.934382684107085*^9},ExpressionUUID->"ab2f7108-3d22-4a5a-802e-\
dab3575407fc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Range", "[", "1000", "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{"#", ",", "7"}], "]"}], "==", 
     RowBox[{"Mod", "[", 
      RowBox[{"#", ",", "8"}], "]"}], "==", "1"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.933045668871724*^9, 3.933045670351816*^9}, {
  3.934382695265136*^9, 3.934382726256661*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"927e272f-70f3-49b3-bfcd-eda4da25453a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "57", ",", "113", ",", "169", ",", "225", ",", "281", ",", "337", 
   ",", "393", ",", "449", ",", "505", ",", "561", ",", "617", ",", "673", 
   ",", "729", ",", "785", ",", "841", ",", "897", ",", "953"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.933045670910715*^9, 3.934382727620391*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"69b9d7b3-0b48-4979-9166-8a50e548d3bc"]
}, Open  ]],

Cell["\<\
+Q4. Make a list of numbers up to 100, where multiples of 3 are replaced by \
Black, multiples of 5 by White and multiples of 3 and 5 by Red. \
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, {
   3.933045368732009*^9, 3.933045377536852*^9}, {3.933045545062495*^9, 
   3.933045552087694*^9}, {3.933045582724339*^9, 3.933045598952709*^9}, {
   3.933045677555182*^9, 3.933045686113638*^9}, 3.933045735838911*^9, {
   3.934382742600177*^9, 
   3.9343827430546207`*^9}},ExpressionUUID->"efef2f79-a2e6-43e0-8378-\
3b5d22e7b0c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{"n", ",", "15"}], "]"}], "==", "0"}], ",", "Red", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Mod", "[", 
         RowBox[{"n", ",", "5"}], "]"}], "==", "0"}], ",", "White", ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Mod", "[", 
           RowBox[{"n", ",", "3"}], "]"}], "==", "0"}], ",", "Black", ",", 
         "n"}], "]"}]}], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "100"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.933045688054871*^9, 3.933045690241729*^9}, {
  3.934382799375898*^9, 3.934382848758954*^9}, {3.93438291127605*^9, 
  3.9343829826700077`*^9}, {3.934383037051312*^9, 3.934383061945155*^9}, {
  3.934383183550576*^9, 3.934383356762046*^9}, {3.934383398685999*^9, 
  3.9343834177053957`*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"be995d49-c456-4756-abc4-e042c020b8f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "4", ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "7", ",", "8", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"], ",", "11", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "13", ",", "14", ",", 
   TemplateBox[<|"color" -> RGBColor[1, 0, 0]|>,
    "RGBColorSwatchTemplate"], ",", "16", ",", "17", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "19", ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "22", ",", "23", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"], ",", "26", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "28", ",", "29", ",", 
   TemplateBox[<|"color" -> RGBColor[1, 0, 0]|>,
    "RGBColorSwatchTemplate"], ",", "31", ",", "32", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "34", ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "37", ",", "38", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"], ",", "41", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "43", ",", "44", ",", 
   TemplateBox[<|"color" -> RGBColor[1, 0, 0]|>,
    "RGBColorSwatchTemplate"], ",", "46", ",", "47", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "49", ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "52", ",", "53", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"], ",", "56", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "58", ",", "59", ",", 
   TemplateBox[<|"color" -> RGBColor[1, 0, 0]|>,
    "RGBColorSwatchTemplate"], ",", "61", ",", "62", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "64", ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "67", ",", "68", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"], ",", "71", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "73", ",", "74", ",", 
   TemplateBox[<|"color" -> RGBColor[1, 0, 0]|>,
    "RGBColorSwatchTemplate"], ",", "76", ",", "77", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "79", ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "82", ",", "83", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"], ",", "86", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "88", ",", "89", ",", 
   TemplateBox[<|"color" -> RGBColor[1, 0, 0]|>,
    "RGBColorSwatchTemplate"], ",", "91", ",", "92", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "94", ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", "97", ",", "98", ",", 
   TemplateBox[<|"color" -> GrayLevel[0]|>,
    "GrayLevelColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> GrayLevel[1]|>,
    "GrayLevelColorSwatchTemplate"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.934383064189748*^9, 3.934383189684123*^9, {3.934383263147953*^9, 
   3.9343833585457487`*^9}, {3.934383399395652*^9, 3.934383425289741*^9}},
 CellLabel->"Out[76]=",ExpressionUUID->"f50d427e-3e66-4aa7-af6f-58c8be276c1d"]
}, Open  ]],

Cell["\<\
+Q5. Use Select to get a list of planets whose mass is larger than Earth.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, {
   3.933045368732009*^9, 3.933045377536852*^9}, {3.933045545062495*^9, 
   3.933045552087694*^9}, {3.933045582724339*^9, 3.933045598952709*^9}, {
   3.9330457031081543`*^9, 3.933045735417865*^9}, 
   3.934383435158963*^9},ExpressionUUID->"6acf1fed-e968-4787-a2b9-\
76b2c9c3f95e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"EntityList", "[", 
    TemplateBox[{"\"planets\"", 
      RowBox[{"EntityClass", "[", 
        RowBox[{"\"Planet\"", ",", "All"}], "]"}], 
      "\"EntityClass[\\\"Planet\\\", All]\"", "\"planets\""},
     "EntityClass"], "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "[", "\"\<Mass\>\"", "]"}], ">", 
     RowBox[{
      TemplateBox[{"\"Earth\"", 
        RowBox[{"Entity", "[", 
          RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
        "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
       "Entity"], "[", "\"\<Mass\>\"", "]"}]}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.933045718471546*^9, 3.93304572252605*^9}, {
  3.934383439615448*^9, 3.9343834832302732`*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"1fc77a8c-0a02-42a6-b014-05309fd64b6c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"Jupiter\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Planet\"", ",", "\"Jupiter\""}], "]"}], 
     "\"Entity[\\\"Planet\\\", \\\"Jupiter\\\"]\"", "\"planet\""},
    "Entity"], ",", 
   TemplateBox[{"\"Saturn\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Planet\"", ",", "\"Saturn\""}], "]"}], 
     "\"Entity[\\\"Planet\\\", \\\"Saturn\\\"]\"", "\"planet\""},
    "Entity"], ",", 
   TemplateBox[{"\"Uranus\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Planet\"", ",", "\"Uranus\""}], "]"}], 
     "\"Entity[\\\"Planet\\\", \\\"Uranus\\\"]\"", "\"planet\""},
    "Entity"], ",", 
   TemplateBox[{"\"Neptune\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Planet\"", ",", "\"Neptune\""}], "]"}], 
     "\"Entity[\\\"Planet\\\", \\\"Neptune\\\"]\"", "\"planet\""},
    "Entity"]}], "}"}]], "Output",
 CellChangeTimes->{3.933045723129423*^9, 3.9343834902212343`*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"609226c7-802d-49a7-8bce-f1dc7b3cf5d7"]
}, Open  ]],

Cell["\<\
+Q6. Make a 50\[Times]50 array plot in which a square at position i, j is \
black if Mod[i, j]==0.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, {
   3.933045368732009*^9, 3.933045377536852*^9}, {3.933045545062495*^9, 
   3.933045552087694*^9}, {3.933045582724339*^9, 3.933045598952709*^9}, {
   3.933045733001451*^9, 3.933045751555725*^9}, 
   3.934383496965639*^9},ExpressionUUID->"d2b56678-13bc-4b26-afb9-\
1a6f2fe7f3b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{"i", ",", "j"}], "]"}], "==", "0"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "50"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "50"}], "}"}]}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"True", "->", "1"}], ",", 
     RowBox[{"False", "->", "0"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.933045753656581*^9, 3.9330457586195803`*^9}, {
  3.934383514314735*^9, 3.9343835700050507`*^9}, {3.9343836523695374`*^9, 
  3.934383671126163*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"bacd1adb-b42f-44b1-926c-8bcde2e657e9"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJyVVtsRwzAIk7tJV+goHSELdP+/tjl8foEQuTwu4aFgBPh5fd7XA8DLLqC1
32m3cWyvkwBcfhq0GwW3Sb+YC1S8d0dwTQI/FjCm3+GIpoOuhl0UAFdWyZ53
QlZzHpqKMfT+caA1zJ+oQap6Ss58OHZI5Nyg82oQ5nThsBoUaZftceRhDf+U
GisGq4ts4SQpLOl6sVdWqWNMtbulKvIjJm7G8HXihhUICY/XfpUbyJmeMRwt
mtbzh1IeWMql4g3EWVX2AaK3I4HeB4Y0NxafWsdaMIam1FJFaiwYiAmfYMhd
PpjnDKM80T0qJhg1hMGrGkZx38BHgYtRNAj2JRyjenwBZDkLAg==
   "], {{0, 0}, {50, 50}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{
  3.933045759428879*^9, {3.934383545169588*^9, 3.934383570507161*^9}, {
   3.934383663605443*^9, 3.934383671405312*^9}},
 CellLabel->"Out[83]=",ExpressionUUID->"f7905a75-4e6c-4442-8ba8-23fbe96769e6"]
}, Open  ]],

Cell["\<\
+Q7. Make a 100\[Times]100 array plot in which a square is black if the \
values of both its x and y positions do not contain a 5.\
\>", "CodeText",
 CellChangeTimes->{{3.933044981954609*^9, 3.9330449829879637`*^9}, {
   3.9330450176513767`*^9, 3.9330450320914183`*^9}, {3.933045084826315*^9, 
   3.9330450895412827`*^9}, {3.933045286272798*^9, 3.933045318006721*^9}, {
   3.933045368732009*^9, 3.933045377536852*^9}, {3.933045545062495*^9, 
   3.933045552087694*^9}, {3.933045582724339*^9, 3.933045598952709*^9}, {
   3.933045768065074*^9, 3.933045792173938*^9}, 
   3.934383683691387*^9},ExpressionUUID->"2d440f7a-2a9d-4a00-bbdb-\
b26e7cf47478"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"!", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"IntegerDigits", "[", "i", "]"}], ",", "5"}], "]"}], "&&", 
         
         RowBox[{"MemberQ", "[", 
          RowBox[{
           RowBox[{"IntegerDigits", "[", "j", "]"}], ",", "5"}], "]"}]}], 
        ")"}]}], ",", "1", ",", "0"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "100"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "100"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.933045779873397*^9, 3.933045788449924*^9}, {
  3.934383750288616*^9, 3.934383849007763*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"c3c85fa7-8d5a-4b56-bb6b-df375bf60b70"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJzt07ENgCAARFFwE1dyBGLP/p2NsadQzPFeQmJDrsC/t360rZRy3oc11ZGv
+hi6C8ylc8inc8inc97wxX9lw4aNuRv8izeHfDqHfDqHfDqHfDpfywXt/QPa

   "], {{0, 0}, {100, 100}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{
  3.933045788975348*^9, {3.934383837561784*^9, 3.934383849866665*^9}},
 CellLabel->"Out[85]=",ExpressionUUID->"275db05a-cea9-4b51-9ba8-61158dbbb246"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{654.75, 849.75},
WindowMargins->{{Automatic, 1.5}, {2.25, 27.75}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"93c64129-1d59-4ff9-8b8d-02b5935400c7"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 150, 3, 68, "Section",ExpressionUUID->"c7395808-00b9-44e7-b2b4-475c364c9325"],
Cell[733, 27, 291, 5, 38, "CodeText",ExpressionUUID->"86623688-5670-4129-8f49-fe0d92cda0f2"],
Cell[CellGroupData[{
Cell[1049, 36, 250, 4, 29, "Input",ExpressionUUID->"8ed7d348-360c-41ed-a94c-e740de8838e8"],
Cell[1302, 42, 198, 3, 33, "Output",ExpressionUUID->"34c09fbb-833f-4a40-9f5e-fe06cb08a05a"]
}, Open  ]],
Cell[1515, 48, 289, 5, 38, "CodeText",ExpressionUUID->"0cc19f9f-3051-4241-a344-e7f135ebb7ae"],
Cell[CellGroupData[{
Cell[1829, 57, 246, 4, 29, "Input",ExpressionUUID->"561f7e3f-2878-4f05-9ee6-10d35d32627b"],
Cell[2078, 63, 173, 2, 33, "Output",ExpressionUUID->"a00440b1-b7d0-4cc5-855f-a43dccdaef04"]
}, Open  ]],
Cell[2266, 68, 289, 5, 38, "CodeText",ExpressionUUID->"a074557b-abb7-466f-859f-9c7ab5d7856f"],
Cell[CellGroupData[{
Cell[2580, 77, 269, 4, 29, "Input",ExpressionUUID->"aeed0c87-4b87-48cd-8e3e-8984355b72aa"],
Cell[2852, 83, 199, 3, 33, "Output",ExpressionUUID->"33b93671-f315-4336-ae96-408c764c6bd6"]
}, Open  ]],
Cell[3066, 89, 300, 5, 38, "CodeText",ExpressionUUID->"1c454bad-a2ca-4df1-bf9e-a8dcd50fd685"],
Cell[CellGroupData[{
Cell[3391, 98, 270, 4, 29, "Input",ExpressionUUID->"e3fa50e6-cdcb-44a2-bc73-b14e3b54aa82"],
Cell[3664, 104, 198, 3, 33, "Output",ExpressionUUID->"b8bf2423-517d-434c-8896-1212d90ca724"]
}, Open  ]],
Cell[3877, 110, 298, 5, 38, "CodeText",ExpressionUUID->"fd0cc58d-5a45-4b90-a7ff-9a6296baface"],
Cell[CellGroupData[{
Cell[4200, 119, 298, 5, 29, "Input",ExpressionUUID->"a8bd0351-776c-42dc-840e-3369d4afa345"],
Cell[4501, 126, 227, 4, 33, "Output",ExpressionUUID->"88d569e4-5588-402d-9153-9d9a12a14749"]
}, Open  ]],
Cell[4743, 133, 332, 5, 38, "CodeText",ExpressionUUID->"8540299e-1912-4ad0-9276-db4e9ce01352"],
Cell[CellGroupData[{
Cell[5100, 142, 287, 7, 29, "Input",ExpressionUUID->"0eee1f7e-600a-4f56-9188-a69278f12b67"],
Cell[5390, 151, 148, 2, 33, "Output",ExpressionUUID->"9760ba35-9cd5-4a13-8ca5-450a166bcb97"]
}, Open  ]],
Cell[5553, 156, 355, 5, 38, "CodeText",ExpressionUUID->"f50530fb-0078-4a73-bbc4-c6ba7115ba4d"],
Cell[CellGroupData[{
Cell[5933, 165, 374, 9, 29, "Input",ExpressionUUID->"4d1fc7d1-7741-426a-87f6-f7980810c0a5"],
Cell[6310, 176, 213, 4, 33, "Output",ExpressionUUID->"b385aa71-86ce-4967-95dd-b8c2205141e1"]
}, Open  ]],
Cell[6538, 183, 384, 6, 38, "CodeText",ExpressionUUID->"c4fd222e-306e-4e7a-8021-1e21be3a3784"],
Cell[CellGroupData[{
Cell[6947, 193, 203, 3, 29, "Input",ExpressionUUID->"f84d8c9d-2fbc-4801-9baf-a7b132a61c90"],
Cell[7153, 198, 152, 2, 33, "Output",ExpressionUUID->"b8b17db4-aadb-480c-9ef4-696aac951086"]
}, Open  ]],
Cell[7320, 203, 384, 6, 38, "CodeText",ExpressionUUID->"7e9fa09b-7ccb-4650-acc0-de5c26216788"],
Cell[CellGroupData[{
Cell[7729, 213, 203, 3, 29, "Input",ExpressionUUID->"a9e84490-03b7-47e0-a503-c2bd9c823009"],
Cell[7935, 218, 152, 2, 33, "Output",ExpressionUUID->"f316ad17-372e-4feb-9ecb-4a9666fd0e1f"]
}, Open  ]],
Cell[8102, 223, 435, 7, 38, "CodeText",ExpressionUUID->"c6a4acb6-dab9-4f73-a549-66db1f9688f4"],
Cell[CellGroupData[{
Cell[8562, 234, 253, 4, 29, "Input",ExpressionUUID->"0f15df01-b33f-41b0-b07e-d3d6429e33d7"],
Cell[8818, 240, 174, 2, 33, "Output",ExpressionUUID->"22874805-6d4d-46a6-a640-7b52d0b90a3c"]
}, Open  ]],
Cell[9007, 245, 441, 7, 38, "CodeText",ExpressionUUID->"16375ddb-8933-46d6-9acc-b02185bfb446"],
Cell[CellGroupData[{
Cell[9473, 256, 257, 4, 29, "Input",ExpressionUUID->"5b6795e6-fcd3-4224-a56b-70fc3ef58a81"],
Cell[9733, 262, 174, 2, 33, "Output",ExpressionUUID->"8ae35bac-5548-419d-ab81-b66497683d0f"]
}, Open  ]],
Cell[9922, 267, 435, 7, 38, "CodeText",ExpressionUUID->"2cfd5686-0b02-42c5-b3b2-f41bf16be9fb"],
Cell[CellGroupData[{
Cell[10382, 278, 253, 4, 29, "Input",ExpressionUUID->"62436a5c-86b4-4fa5-9302-c6a23de78a67"],
Cell[10638, 284, 177, 2, 33, "Output",ExpressionUUID->"98d8e3d5-45e2-4ccb-8dc9-c0ba80eefb16"]
}, Open  ]],
Cell[10830, 289, 438, 7, 38, "CodeText",ExpressionUUID->"9487a45e-fff6-4fa6-a806-1085bc42e32a"],
Cell[CellGroupData[{
Cell[11293, 300, 262, 4, 29, "Input",ExpressionUUID->"bd20a1ef-e0fa-4ceb-a331-1527e3b4e73c"],
Cell[11558, 306, 204, 3, 33, "Output",ExpressionUUID->"c3137ff0-b708-4b28-9058-7664e34c1a7e"]
}, Open  ]],
Cell[11777, 312, 448, 7, 38, "CodeText",ExpressionUUID->"b8b7c129-0aaf-4189-bbb2-46da2408e309"],
Cell[CellGroupData[{
Cell[12250, 323, 336, 7, 29, "Input",ExpressionUUID->"b200fcf2-dcbd-4600-a5b0-84386b50d727"],
Cell[12589, 332, 229, 4, 33, "Output",ExpressionUUID->"03307445-246c-4122-888b-2eac2f033701"]
}, Open  ]],
Cell[12833, 339, 516, 7, 38, "CodeText",ExpressionUUID->"c5a33031-62a6-49a5-8920-3b1d40861518"],
Cell[CellGroupData[{
Cell[13374, 350, 123374, 2029, 67, "Input",ExpressionUUID->"23568f04-84c1-46b6-bc11-19d766b0d46d"],
Cell[136751, 2381, 252, 4, 33, "Output",ExpressionUUID->"d152ac7f-b0fa-43e2-9182-e9a831eec2de"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[137052, 2391, 156, 3, 68, "Section",ExpressionUUID->"412ba78e-200d-42a7-a8a0-21db1e445122"],
Cell[137211, 2396, 671, 19, 38, "CodeText",ExpressionUUID->"884f091f-7369-499f-8995-ab333a48e82a"],
Cell[CellGroupData[{
Cell[137907, 2419, 299, 6, 29, "Input",ExpressionUUID->"f4a87653-b483-4198-afd5-3e90f0620ed1"],
Cell[138209, 2427, 174, 2, 33, "Output",ExpressionUUID->"81c45f91-3a0a-4903-9ddd-808853d9328a"]
}, Open  ]],
Cell[138398, 2432, 326, 6, 38, "CodeText",ExpressionUUID->"e5039219-650d-45c3-90b2-144bb22f0edf"],
Cell[CellGroupData[{
Cell[138749, 2442, 462, 11, 29, "Input",ExpressionUUID->"b902cfcb-d50a-42b8-bddb-fbd2b60ac2ad"],
Cell[139214, 2455, 424, 9, 33, "Output",ExpressionUUID->"23ac22a9-c9b8-4f48-aff7-e57acec8a858"]
}, Open  ]],
Cell[139653, 2467, 379, 7, 38, "CodeText",ExpressionUUID->"8240b91a-e4f8-496e-ae27-af96e84ebb48"],
Cell[CellGroupData[{
Cell[140057, 2478, 512, 12, 29, "Input",ExpressionUUID->"a91aa315-ba59-4fcd-892f-5978378882de"],
Cell[140572, 2492, 2207, 61, 33, "Output",ExpressionUUID->"30e18255-feba-4668-a2d5-edc316277fb3"]
}, Open  ]],
Cell[142794, 2556, 478, 9, 38, "CodeText",ExpressionUUID->"5796bcd5-50b9-4774-91a1-592fbbb6b856"],
Cell[CellGroupData[{
Cell[143297, 2569, 535, 14, 29, "Input",ExpressionUUID->"ee43f7f5-3928-4df4-abab-dbf7cd454b3c"],
Cell[143835, 2585, 868, 14, 96, "Output",ExpressionUUID->"508018fd-4ce6-49c1-93bd-696e3d43b299"]
}, Open  ]],
Cell[144718, 2602, 449, 9, 38, "CodeText",ExpressionUUID->"4cc71020-7d29-49a3-bfc3-646c5b5d6276"],
Cell[CellGroupData[{
Cell[145192, 2615, 456, 11, 29, "Input",ExpressionUUID->"825f280a-41e5-4362-87a6-f624fac06d17"],
Cell[145651, 2628, 532, 10, 55, "Output",ExpressionUUID->"e5aefcc2-6da9-4a2b-97c0-deff0b77c450"]
}, Open  ]],
Cell[146198, 2641, 458, 7, 38, "CodeText",ExpressionUUID->"15d543ab-3ebc-4e50-a2bc-616bacb89770"],
Cell[CellGroupData[{
Cell[146681, 2652, 559, 14, 29, "Input",ExpressionUUID->"9239a3fb-05ce-4d30-8e3e-8417b9797d7a"],
Cell[147243, 2668, 690, 12, 55, "Output",ExpressionUUID->"5cf28251-a925-4b55-80fe-fe0b534d3794"]
}, Open  ]],
Cell[147948, 2683, 424, 8, 38, "CodeText",ExpressionUUID->"6514e4f2-1111-4eee-a9c0-61d8a17bf02b"],
Cell[CellGroupData[{
Cell[148397, 2695, 443, 10, 29, "Input",ExpressionUUID->"f2b6d2de-1d2b-4de7-bbaf-b499d388ad3d"],
Cell[148843, 2707, 523, 9, 33, "Output",ExpressionUUID->"004b9b03-8e8a-4939-89ba-809da42be3fc"]
}, Open  ]],
Cell[149381, 2719, 482, 9, 38, "CodeText",ExpressionUUID->"a07201d6-e16b-42df-82e0-7899e600f174"],
Cell[CellGroupData[{
Cell[149888, 2732, 555, 14, 29, "Input",ExpressionUUID->"b4adc608-a084-4abf-a5c1-caaefa266a88"],
Cell[150446, 2748, 522, 9, 55, "Output",ExpressionUUID->"2d272fd8-6c3d-4f3c-a0f2-4a62b3cade99"]
}, Open  ]],
Cell[150983, 2760, 541, 10, 38, "CodeText",ExpressionUUID->"cbf5d670-7f78-4f95-a33f-6a3dc01884af"],
Cell[CellGroupData[{
Cell[151549, 2774, 457, 11, 29, "Input",ExpressionUUID->"03b7cb1e-a5b2-4734-82dc-cd5661cd3e81"],
Cell[152009, 2787, 441, 8, 55, "Output",ExpressionUUID->"3ece39f0-999a-4f7a-9280-bb43b1607de8"]
}, Open  ]],
Cell[152465, 2798, 653, 11, 59, "CodeText",ExpressionUUID->"92386c72-5650-4ecd-b583-4707501461ae"],
Cell[CellGroupData[{
Cell[153143, 2813, 541, 14, 44, "Input",ExpressionUUID->"b3420691-480d-480e-a4b7-577a984c9b31"],
Cell[153687, 2829, 228, 4, 33, "Output",ExpressionUUID->"8fb618f0-33d7-4659-9c30-5f8080e90dbe"]
}, Open  ]],
Cell[153930, 2836, 610, 11, 38, "CodeText",ExpressionUUID->"b6627e54-b9c2-418f-90c9-f8338e107dac"],
Cell[CellGroupData[{
Cell[154565, 2851, 554, 13, 51, "Input",ExpressionUUID->"35ec5494-e622-4429-bd5d-7cfcc235dcfd"],
Cell[155122, 2866, 23960, 572, 375, "Output",ExpressionUUID->"72ca11d1-c299-4403-9887-42c66081ff82"]
}, Open  ]],
Cell[179097, 3441, 671, 11, 59, "CodeText",ExpressionUUID->"9c92f295-553b-40e6-9e77-49b25dd33c09"],
Cell[CellGroupData[{
Cell[179793, 3456, 833, 20, 71, "Input",ExpressionUUID->"e5e71d5d-55d1-4cb3-9c23-2f3edf54914a"],
Cell[180629, 3478, 517, 9, 55, "Output",ExpressionUUID->"3c86a101-f391-41cd-845c-42e6cd13adf5"]
}, Open  ]],
Cell[181161, 3490, 624, 11, 59, "CodeText",ExpressionUUID->"a9d88afe-7b34-4f38-8e71-c50267ab6df9"],
Cell[CellGroupData[{
Cell[181810, 3505, 528, 13, 29, "Input",ExpressionUUID->"d6cb706a-532a-4d3f-b3a9-5693ebd0d8a5"],
Cell[182341, 3520, 11682, 178, 1416, "Output",ExpressionUUID->"6f0e1c6c-f133-4a1c-bde3-fc571f732999"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[194072, 3704, 163, 3, 68, "Section",ExpressionUUID->"e793ec72-45f5-4ef9-a564-fc731fa426cc"],
Cell[194238, 3709, 595, 11, 59, "CodeText",ExpressionUUID->"f9b4ce67-8ae1-4a55-aa64-fb04635f242a"],
Cell[CellGroupData[{
Cell[194858, 3724, 521, 14, 29, "Input",ExpressionUUID->"10acab31-849d-4bed-a18e-36e14a881ada"],
Cell[195382, 3740, 475, 8, 55, "Output",ExpressionUUID->"b900f5e6-caae-49bb-9736-7ef4b0343df2"]
}, Open  ]],
Cell[195872, 3751, 579, 10, 59, "CodeText",ExpressionUUID->"5bf6ba5a-4c99-4b6e-89f4-37c133010940"],
Cell[CellGroupData[{
Cell[196476, 3765, 481, 12, 29, "Input",ExpressionUUID->"196522a9-c494-4d14-9a34-e5eb61ae14a4"],
Cell[196960, 3779, 644, 15, 55, "Output",ExpressionUUID->"2a989707-8ab0-4718-8688-7ac381a0e8ad"]
}, Open  ]],
Cell[197619, 3797, 626, 10, 38, "CodeText",ExpressionUUID->"ab2f7108-3d22-4a5a-802e-dab3575407fc"],
Cell[CellGroupData[{
Cell[198270, 3811, 488, 12, 29, "Input",ExpressionUUID->"927e272f-70f3-49b3-bfcd-eda4da25453a"],
Cell[198761, 3825, 423, 8, 55, "Output",ExpressionUUID->"69b9d7b3-0b48-4979-9166-8a50e548d3bc"]
}, Open  ]],
Cell[199199, 3836, 721, 12, 59, "CodeText",ExpressionUUID->"efef2f79-a2e6-43e0-8378-3b5d22e7b0c5"],
Cell[CellGroupData[{
Cell[199945, 3852, 1035, 26, 51, "Input",ExpressionUUID->"be995d49-c456-4756-abc4-e042c020b8f8"],
Cell[200983, 3880, 4958, 100, 117, "Output",ExpressionUUID->"f50d427e-3e66-4aa7-af6f-58c8be276c1d"]
}, Open  ]],
Cell[205956, 3983, 602, 10, 38, "CodeText",ExpressionUUID->"6acf1fed-e968-4787-a2b9-76b2c9c3f95e"],
Cell[CellGroupData[{
Cell[206583, 3997, 849, 20, 71, "Input",ExpressionUUID->"1fc77a8c-0a02-42a6-b014-05309fd64b6c"],
Cell[207435, 4019, 1024, 24, 44, "Output",ExpressionUUID->"609226c7-802d-49a7-8bce-f1dc7b3cf5d7"]
}, Open  ]],
Cell[208474, 4046, 625, 11, 38, "CodeText",ExpressionUUID->"d2b56678-13bc-4b26-afb9-1a6f2fe7f3b5"],
Cell[CellGroupData[{
Cell[209124, 4061, 710, 19, 29, "Input",ExpressionUUID->"bacd1adb-b42f-44b1-926c-8bcde2e657e9"],
Cell[209837, 4082, 1241, 27, 376, "Output",ExpressionUUID->"f7905a75-4e6c-4442-8ba8-23fbe96769e6"]
}, Open  ]],
Cell[211093, 4112, 657, 11, 59, "CodeText",ExpressionUUID->"2d440f7a-2a9d-4a00-bbdb-b26e7cf47478"],
Cell[CellGroupData[{
Cell[211775, 4127, 836, 23, 92, "Input",ExpressionUUID->"c3c85fa7-8d5a-4b56-bb6b-df375bf60b70"],
Cell[212614, 4152, 958, 23, 399, "Output",ExpressionUUID->"275db05a-cea9-4b51-9ba8-61158dbbb246"]
}, Open  ]]
}, Open  ]]
}
]
*)

